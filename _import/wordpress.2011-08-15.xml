<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log in to that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/3.0.1" created="2011-08-15 06:39"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>zires</title>
	<link>http://zires.info</link>
	<description>LOST IN RUBY&#38;ERLANG</description>
	<pubDate>Sun, 07 Aug 2011 05:50:42 +0000</pubDate>
	<generator>http://wordpress.org/?v=3.0.1</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://zires.info</wp:base_site_url>
	<wp:base_blog_url>http://zires.info</wp:base_blog_url>
		<wp:category><wp:category_nicename>android</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Android]]></wp:cat_name><wp:category_description><![CDATA[Android]]></wp:category_description></wp:category>
		<wp:category><wp:category_nicename>erlang</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[erlang]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>git</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[git]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>html5css3</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[HTML5&amp;CSS3]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>jquery</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[jquery]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>linux</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Linux]]></wp:cat_name><wp:category_description><![CDATA[I like linux]]></wp:category_description></wp:category>
		<wp:category><wp:category_nicename>mongodb</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[MongoDB]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>nginx</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[nginx]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>red5</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Red5]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>ruby%ef%bc%8crails</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Ruby&amp;Rails]]></wp:cat_name><wp:category_description><![CDATA[Rails and Ruby]]></wp:category_description></wp:category>
		<wp:category><wp:category_nicename>ubuntu</wp:category_nicename><wp:category_parent>Linux</wp:category_parent><wp:cat_name><![CDATA[ubuntu]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>centos</wp:category_nicename><wp:category_parent>Linux</wp:category_parent><wp:cat_name><![CDATA[centos]]></wp:cat_name></wp:category>
			<wp:tag><wp:tag_slug>actioncontroller</wp:tag_slug><wp:tag_name><![CDATA[ActionController]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>actiondispatch</wp:tag_slug><wp:tag_name><![CDATA[ActionDispatch]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>actionpack</wp:tag_slug><wp:tag_name><![CDATA[actionpack]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>activesupport</wp:tag_slug><wp:tag_name><![CDATA[ActiveSupport]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>alias_method_chain</wp:tag_slug><wp:tag_name><![CDATA[alias_method_chain]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>arel</wp:tag_slug><wp:tag_name><![CDATA[arel]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>benchmarkable</wp:tag_slug><wp:tag_name><![CDATA[Benchmarkable]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>capistrano</wp:tag_slug><wp:tag_name><![CDATA[capistrano]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>carrierwave</wp:tag_slug><wp:tag_name><![CDATA[carrierwave]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>cgi</wp:tag_slug><wp:tag_name><![CDATA[cgi]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>convert</wp:tag_slug><wp:tag_name><![CDATA[convert]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>core_extension</wp:tag_slug><wp:tag_name><![CDATA[core_extension]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>debug</wp:tag_slug><wp:tag_name><![CDATA[debug]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>delayed_job</wp:tag_slug><wp:tag_name><![CDATA[delayed_job]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>deployment</wp:tag_slug><wp:tag_name><![CDATA[deployment]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>deprecated</wp:tag_slug><wp:tag_name><![CDATA[deprecated]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>devise</wp:tag_slug><wp:tag_name><![CDATA[devise]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>engine</wp:tag_slug><wp:tag_name><![CDATA[engine]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>error</wp:tag_slug><wp:tag_name><![CDATA[error]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>eventmachine</wp:tag_slug><wp:tag_name><![CDATA[EventMachine]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>excel</wp:tag_slug><wp:tag_name><![CDATA[excel]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>factory_girl</wp:tag_slug><wp:tag_name><![CDATA[factory_girl]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>fcgi</wp:tag_slug><wp:tag_name><![CDATA[fcgi]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>ffmpeg</wp:tag_slug><wp:tag_name><![CDATA[ffmpeg]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>fiber</wp:tag_slug><wp:tag_name><![CDATA[fiber]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[git]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>git-cherry-pick</wp:tag_slug><wp:tag_name><![CDATA[git cherry-pick]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>git-merge</wp:tag_slug><wp:tag_name><![CDATA[git merge]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>git-rebase</wp:tag_slug><wp:tag_name><![CDATA[git rebase]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>google-map</wp:tag_slug><wp:tag_name><![CDATA[google map]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>grep</wp:tag_slug><wp:tag_name><![CDATA[grep]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>group</wp:tag_slug><wp:tag_name><![CDATA[group]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>hash</wp:tag_slug><wp:tag_name><![CDATA[hash]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>html5</wp:tag_slug><wp:tag_name><![CDATA[html5]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>init-d</wp:tag_slug><wp:tag_name><![CDATA[init.d]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>initialization</wp:tag_slug><wp:tag_name><![CDATA[Initialization]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>issues</wp:tag_slug><wp:tag_name><![CDATA[issues]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>logger</wp:tag_slug><wp:tag_name><![CDATA[logger]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>memcached</wp:tag_slug><wp:tag_name><![CDATA[memcached]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>metal</wp:tag_slug><wp:tag_name><![CDATA[metal]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>metaprogramming</wp:tag_slug><wp:tag_name><![CDATA[Metaprogramming]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>mongodb-2</wp:tag_slug><wp:tag_name><![CDATA[mongoDB]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>mongoid</wp:tag_slug><wp:tag_name><![CDATA[mongoid]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>mysql2</wp:tag_slug><wp:tag_name><![CDATA[mysql2]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>nginx</wp:tag_slug><wp:tag_name><![CDATA[nginx]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>paperclip</wp:tag_slug><wp:tag_name><![CDATA[paperclip]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>plugin</wp:tag_slug><wp:tag_name><![CDATA[plugin]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>private</wp:tag_slug><wp:tag_name><![CDATA[private]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>protected</wp:tag_slug><wp:tag_name><![CDATA[protected]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>rack</wp:tag_slug><wp:tag_name><![CDATA[rack]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>rails</wp:tag_slug><wp:tag_name><![CDATA[rails]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>rails2-3-5</wp:tag_slug><wp:tag_name><![CDATA[rails2.3.5]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>rails3</wp:tag_slug><wp:tag_name><![CDATA[rails3]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>red5-2</wp:tag_slug><wp:tag_name><![CDATA[red5]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>regexp</wp:tag_slug><wp:tag_name><![CDATA[regexp]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>responder</wp:tag_slug><wp:tag_name><![CDATA[Responder]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>respond_with</wp:tag_slug><wp:tag_name><![CDATA[respond_with]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>resque</wp:tag_slug><wp:tag_name><![CDATA[resque]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>roo</wp:tag_slug><wp:tag_name><![CDATA[Roo]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>routes</wp:tag_slug><wp:tag_name><![CDATA[routes]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[ruby]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>ruby1-9</wp:tag_slug><wp:tag_name><![CDATA[ruby1.9]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>scgi</wp:tag_slug><wp:tag_name><![CDATA[scgi]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>subdomain</wp:tag_slug><wp:tag_name><![CDATA[subdomain]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>tinymce</wp:tag_slug><wp:tag_name><![CDATA[tinymce]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>unicorn</wp:tag_slug><wp:tag_name><![CDATA[unicorn]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>upload</wp:tag_slug><wp:tag_name><![CDATA[upload]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>uploadify</wp:tag_slug><wp:tag_name><![CDATA[uploadify]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>variables</wp:tag_slug><wp:tag_name><![CDATA[variables]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>vim</wp:tag_slug><wp:tag_name><![CDATA[vim]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>wsgi</wp:tag_slug><wp:tag_name><![CDATA[wsgi]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>%e5%a4%87%e5%bf%98</wp:tag_slug><wp:tag_name><![CDATA[备忘]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f</wp:tag_slug><wp:tag_name><![CDATA[设计模式]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>%e9%9d%a2%e8%af%95%e9%a2%98</wp:tag_slug><wp:tag_name><![CDATA[面试题]]></wp:tag_name></wp:tag>
			<wp:term><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>header</wp:term_slug><wp:term_parent></wp:term_parent><wp:term_name><![CDATA[Header]]></wp:term_name></wp:term>
	
	<generator>http://wordpress.org/?v=3.0.1</generator>

		<item>
		<title>useful methods in rails rails3 left half</title>
		<link>http://zires.info/?p=178</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[#to_param
#autoload
#config
#assert_valid_keys(*valid_keys)
#reverse_merge!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date>2010-12-23 14:25:33</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1299767138]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails3 Memcached</title>
		<link>http://zires.info/?p=164</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[memcached]]></category>

		<category domain="tag" nicename="memcached"><![CDATA[memcached]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=164</guid>
		<description></description>
		<content:encoded><![CDATA[http://blog.developers.api.sina.com.cn/?p=124
http://zh.wikipedia.org/zh/Memcached
http://tech.idv2.com/2008/07/10/memcached-001/
http://stackoverflow.com/questions/3457590/configure-memcached-with-rails-3
http://docs.heroku.com/memcache
http://rubygems.org/gems/memcached-northscale
https://github.com/mperham/dalli]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date>2010-12-10 21:32:06</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_oembed_69c302100c1fef05f26fa5625c8d4076</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_66ae2ea332d42123faba301653397972</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_212093d0010e65740508d7d9f9065475</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_d5aa7f9bf451d7954da571389dc5fcd1</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1291987927]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_1a2eb2106c8129038775eba88d91c48d</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_91e9133f8f87051ebbc4a8cfc1877f82</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_34fc5d001e0fd5f3099d6df330672adb</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails3 carrierwave resque</title>
		<link>http://zires.info/?p=176</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[carrierwave]]></category>

		<category domain="tag" nicename="carrierwave"><![CDATA[carrierwave]]></category>

		<category domain="tag"><![CDATA[plugin]]></category>

		<category domain="tag" nicename="plugin"><![CDATA[plugin]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category domain="tag"><![CDATA[resque]]></category>

		<category domain="tag" nicename="resque"><![CDATA[resque]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=176</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date>2010-12-15 23:34:12</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1292427252]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Red-black tree</title>
		<link>http://zires.info/?p=180</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=180</guid>
		<description></description>
		<content:encoded><![CDATA[Red-black tree 红黑树
介绍：<a href="http://en.wikipedia.org/wiki/Red-black_tree"><strong>红黑树wiki</strong></a>


<blockquote>红黑树是每个节点都带有颜色属性的二叉查找树，颜色或红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求:

性质1. 节点是红色或黑色。

性质2. 根是黑色。

性质3. 所有叶子都是黑色（叶子是NIL节点）。

性质4. 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)

性质5. 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。</blockquote>


Ruby 实现
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date>2011-02-12 21:27:50</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>red-black-tree</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1297517271]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>multiple ajax upload image in background task rails3  </title>
		<link>http://zires.info/?p=181</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[delayed_job]]></category>

		<category domain="tag" nicename="delayed_job"><![CDATA[delayed_job]]></category>

		<category domain="tag"><![CDATA[paperclip]]></category>

		<category domain="tag" nicename="paperclip"><![CDATA[paperclip]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category domain="tag"><![CDATA[resque]]></category>

		<category domain="tag" nicename="resque"><![CDATA[resque]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[upload]]></category>

		<category domain="tag" nicename="upload"><![CDATA[upload]]></category>

		<category domain="tag"><![CDATA[uploadify]]></category>

		<category domain="tag" nicename="uploadify"><![CDATA[uploadify]]></category>

		<guid isPermaLink="false">http://zires.info/?p=181</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2010-12-18 01:13:51</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1292606032]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails rails3  actionpack</title>
		<link>http://zires.info/?p=266</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[actionpack]]></category>

		<category domain="tag" nicename="actionpack"><![CDATA[actionpack]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=266</guid>
		<description></description>
		<content:encoded><![CDATA[[cci lang="ruby"]Action Pack[/cci] 可以说是rails框架最核心的部分，它被设计用来处理或者响应web请求。使用了MVC模式。
<p>里面有几个比较熟悉的东西</p>
[cc lang="ruby"]
Action Controller

Action View

route

[/cc]
<p>里面还有一个在写程序时看不见的东西</p>
[cc lang="ruby"]
Action Dispatch
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date>2011-01-04 09:03:55</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1294103035]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>EventMachine ruby rails</title>
		<link>http://zires.info/?p=332</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[EventMachine]]></category>

		<category domain="tag" nicename="eventmachine"><![CDATA[EventMachine]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=332</guid>
		<description></description>
		<content:encoded><![CDATA[http://chinaonrails.com/topic/view/1651.html#;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date>2011-03-10 22:21:04</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>eventmachine-ruby-rails</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1299766865]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Rails logger</title>
		<link>http://zires.info/?p=300</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[logger]]></category>

		<category domain="tag" nicename="logger"><![CDATA[logger]]></category>

		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=300</guid>
		<description></description>
		<content:encoded><![CDATA[http://maintainablesoftware.com/articles/rails_logging_tips
http://stackoverflow.com/questions/337739/how-to-log-something-in-rails-in-an-independent-log-file
http://stackoverflow.com/questions/1154484/logging-in-ruby-on-rails]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date>2011-01-11 09:38:50</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1303572079]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ruby split string two parts</title>
		<link>http://zires.info/?p=438</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[core_extension]]></category>

		<category domain="tag" nicename="core_extension"><![CDATA[core_extension]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=438</guid>
		<description></description>
		<content:encoded><![CDATA[  # return a array [first,last]
  # split("a:b:c", ":") #=> ["a", "b:c"]
  # split("a(b(c))", "()") #=> ["a", "b(c)"]
  # split("abc", ":") #=> ["abc"]
  # split("abc", "()") #=> ["abc"]
  def split(str, format)
    left, right = format.each_char.map
	  switch = true
	  result = []
    sremain = str.each_char.inject([]) do |stack, value|
		  if switch and value == left
			  result << stack.join
			  stack.clear
			  switch = false
		  else
			  stack << value
		  end
		  stack
    end
	  remain = right.nil? ? remain.join : split(remain.reverse.join, right).last.reverse
	  result << remain
  end]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>438</wp:post_id>
		<wp:post_date>2011-02-18 13:35:13</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298007313]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>active_support callbacks </title>
		<link>http://zires.info/?p=428</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=428</guid>
		<description></description>
		<content:encoded><![CDATA[https://github.com/rails/rails/blob/master/activesupport/lib/active_support/callbacks.rb]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>428</wp:post_id>
		<wp:post_date>2011-02-16 15:27:18</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1297841239]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Rails Metal</title>
		<link>http://zires.info/?p=355</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[metal]]></category>

		<category domain="tag" nicename="metal"><![CDATA[metal]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=355</guid>
		<description></description>
		<content:encoded><![CDATA[http://railscasts.com/episodes/150-rails-metal]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>355</wp:post_id>
		<wp:post_date>2011-01-26 12:23:29</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1296015809]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails3 ActionController Responder</title>
		<link>http://zires.info/?p=350</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[ActionController]]></category>

		<category domain="tag" nicename="actioncontroller"><![CDATA[ActionController]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category domain="tag"><![CDATA[Responder]]></category>

		<category domain="tag" nicename="responder"><![CDATA[Responder]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=350</guid>
		<description></description>
		<content:encoded><![CDATA[http://weblog.rubyonrails.org/2009/8/31/three-reasons-love-responder
http://blog.plataformatec.com.br/2009/08/embracing-rest-with-mind-body-and-soul/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date>2011-01-20 22:39:44</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1295534575]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>how rails3 debug</title>
		<link>http://zires.info/?p=453</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[debug]]></category>

		<category domain="tag" nicename="debug"><![CDATA[debug]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=453</guid>
		<description></description>
		<content:encoded><![CDATA[http://stackoverflow.com/questions/1413420/rails-cookieoverflow
http://bashdb.sourceforge.net/ruby-debug.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>453</wp:post_id>
		<wp:post_date>2011-03-22 15:31:38</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1300779099]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails3 arel</title>
		<link>http://zires.info/?p=501</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[arel]]></category>

		<category domain="tag" nicename="arel"><![CDATA[arel]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=501</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>501</wp:post_id>
		<wp:post_date>2011-03-02 08:44:09</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1299026650]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails3 engine</title>
		<link>http://zires.info/?p=398</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[engine]]></category>

		<category domain="tag" nicename="engine"><![CDATA[engine]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=398</guid>
		<description></description>
		<content:encoded><![CDATA[https://github.com/rails/rails/blob/master/railties/lib/rails/engine.rb]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>398</wp:post_id>
		<wp:post_date>2011-02-13 03:27:09</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1297538830]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ActiveSupport Benchmarkable</title>
		<link>http://zires.info/?p=462</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[ActiveSupport]]></category>

		<category domain="tag" nicename="activesupport"><![CDATA[ActiveSupport]]></category>

		<category domain="tag"><![CDATA[Benchmarkable]]></category>

		<category domain="tag" nicename="benchmarkable"><![CDATA[Benchmarkable]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=462</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>462</wp:post_id>
		<wp:post_date>2011-02-21 22:14:49</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298297689]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ruby fiber</title>
		<link>http://zires.info/?p=509</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[fiber]]></category>

		<category domain="tag" nicename="fiber"><![CDATA[fiber]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[ruby1.9]]></category>

		<category domain="tag" nicename="ruby1-9"><![CDATA[ruby1.9]]></category>

		<guid isPermaLink="false">http://zires.info/?p=509</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>509</wp:post_id>
		<wp:post_date>2011-03-10 09:42:42</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1299721362]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Quick Ref</title>
		<link>http://zires.info/?page_id=592</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/</guid>
		<description></description>
		<content:encoded><![CDATA[http://www.cyberciti.biz/faq/unix-linux-finding-files-by-content/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>592</wp:post_id>
		<wp:post_date>2011-04-13 15:01:04</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>related_title</wp:meta_key>
		<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1302678064]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_page_template</wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>mongoid group by</title>
		<link>http://zires.info/?p=655</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[group]]></category>

		<category domain="tag" nicename="group"><![CDATA[group]]></category>

		<category><![CDATA[MongoDB]]></category>

		<category domain="category" nicename="mongodb"><![CDATA[MongoDB]]></category>

		<category domain="tag"><![CDATA[mongoDB]]></category>

		<category domain="tag" nicename="mongodb-2"><![CDATA[mongoDB]]></category>

		<category domain="tag"><![CDATA[mongoid]]></category>

		<category domain="tag" nicename="mongoid"><![CDATA[mongoid]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=655</guid>
		<description></description>
		<content:encoded><![CDATA[接着<a href="http://zires.info/2011/07/07/mongoid-distinct/" target="_blank">mongoid distinct</a> 这篇文章，来看看mongoid中group by 的实现。

还是users那个文档，现在用mongo的group来实现返回]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>655</wp:post_id>
		<wp:post_date>2011-07-07 07:38:26</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1309995506]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Auto Draft</title>
		<link>http://zires.info/?p=728</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/?p=728</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>728</wp:post_id>
		<wp:post_date>2011-08-07 12:48:47</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>Summary</title>
		<link>http://zires.info/?page_id=598</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong>2010年</strong></blockquote>
2010年可以说是技术最为巩固的一年，参与开发了一个Rails2.8的系统，有点类似电子商务，但是比那个复杂，从无到有，从有到不断的完善，增加了许多实际的经验，包括与客户交流的经验。除了这个项目，还有一个电子商务系统，不过是在一个开源项目上二次开发的，也成长了不少经验。除此之外，开始接触Rails3，自己写写Rails3项目，对BDD和TDD有了锻炼，Rspec，shoulda，factory-girl，cucumber有了联合使用，基本熟练使用了Git。另外，对于WEB开发有了自己的见解，由于在一家小公司，可以说，从头到脚学到了许多的东西，包括Unix，包括前端开发，还学了一点点美工知识（简单的PS技术）。这一年，我还有一个变化是知道自己需要什么了，成熟了不少。年末的时候，开始有自己的打算，并且完成了xxx的雏形以及设想。
<p></p>
<blockquote><strong>2011年</strong></blockquote>
新的一年开始，2011这一年主要的打算有：
1）初步定在两个月后辞职。
2）完成xxx网站。
3）学习英语，强化口语。
4）Android可以入门了。
5）erlang可以入门了。
<p>重点是在英语上。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>598</wp:post_id>
		<wp:post_date>2011-04-13 15:03:29</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1302678209]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>related_title</wp:meta_key>
		<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_page_template</wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>About</title>
		<link>http://zires.info/about/</link>
		<pubDate>Mon, 22 Nov 2010 07:53:06 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://9373.ipc.la/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I am zires，a ruby&rails coder。I like open source projects，and also enjoy c，android development。Ubuntu is my favorite OS。Btw，i am a arsenal football team fans!</p>

===

Wanna get in touch? Use below connection

[cc lang="ruby"]
zires.email = zires at aukudu.com

zires.github = https://github.com/zires

zires.twitter = http://twitter.com/t_zires

[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2010-11-22 07:53:06</wp:post_date>
		<wp:post_date_gmt>2010-11-22 07:53:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_wp_page_template</wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1309513193]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>related_title</wp:meta_key>
		<wp:meta_value><![CDATA[Related posts]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>vim search and replace</title>
		<link>http://zires.info/2010/11/24/vim-search-and-replace/</link>
		<pubDate>Tue, 23 Nov 2010 17:58:14 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[Linux]]></category>

		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>

		<category domain="tag"><![CDATA[vim]]></category>

		<category domain="tag" nicename="vim"><![CDATA[vim]]></category>

		<guid isPermaLink="false">http://zires.info/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[基本的查找，在命令模式下

[cc lang="ruby"]
/example    ### 将从文档从上往下查找

?example    ### 将从文档从下往上查找
[/cc]

基本的替换，在命令模式下

[cc lang="ruby"]

### range可选，如果不填的话只会匹配和替换第一行
:[range]s /search/replace/

### 搜索n到m行
:n,m s /search/replace/

[/cc]

如果全文搜索替换呢

[cc lang="ruby"]

### 全文搜索
%s/search/replace/g

### 全文搜索，但是给出是否替换提示
%s/search/replace/gc

### 全文搜索，忽略大小写
%s/search/replace/gi

### 使用&quot;\&quot;转义
%s/search\//replace/gi
[/cc]

常用的就这么多，特殊需求看文档]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2010-11-24 01:58:14</wp:post_date>
		<wp:post_date_gmt>2010-11-23 17:58:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vim-search-and-replace</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1292776363]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ruby daily practice 1</title>
		<link>http://zires.info/2010/11/25/ruby-%e9%9d%a2%e8%af%95%e9%a2%98-%e4%b8%80%e5%a4%a9%e4%b8%80%e7%bb%83/</link>
		<pubDate>Wed, 24 Nov 2010 16:02:08 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[面试题]]></category>

		<category domain="tag" nicename="%e9%9d%a2%e8%af%95%e9%a2%98"><![CDATA[面试题]]></category>

		<guid isPermaLink="false">http://zires.info/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>题目：在排序数组中，找出给定数字的出现次数，比如 [1, 2, 2, 2, 3] 中2的出现次数是3次。</blockquote>
最简单的方法
[cc lang="ruby"]
# 给定数组
arr = [2，2，4，6，9，8，3，6，2，4，6，9]

# 使用count函数
arr.count(2)  #=&gt; 3

arr.count(1)  #=&gt; 0
[/cc]
So Easy 

不过题目不会考你api方法的，考的应该是算法
二分搜索查找，时间复杂度O(log n)。
[cc lang="ruby"]
# 给Array添加新的instance_method
class Array
 def new_count(num, need_sort = true )
 # 初始为0
 count = 0
 return count if empty?
 # 排序  只有第一次需要
 sort_arr = need_sort ? self.sort : self		
 index = sort_arr.length/2
 last_index = sort_arr.length - 1
 # 取得中间的数			
 middle = sort_arr.at(index)
 if middle == num
   # 因为匹配成功才扫描，所以肯定有一个存在
   count = 1			
   # 向前扫描			
   (index -1).downto(0) do |idx|
     if sort_arr.at(idx) == num
	count += 1
     else
        break
     end
   end
   # 向后扫描
   (index + 1).upto(last_index) do |idx|
	if sort_arr.at(idx) == num
	    count += 1
	else
	   break
	 end
    end
  elsif middle &gt; num
	sort_arr[0..(index -1)].new_count(num,false)
  elsif middle &lt; num
	sort_arr[(index + 1)..(last_index - 1)].new_count(num,false)			
  end
	return count
  end
end

# 测试
[1,4,4,3,4,4,4].new_count(3) # =&gt; 1
[1,4,4,3,4,2,4].new_count(4) # =&gt; 4
[/cc]

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2010-11-25 00:02:08</wp:post_date>
		<wp:post_date_gmt>2010-11-24 16:02:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-%e9%9d%a2%e8%af%95%e9%a2%98-%e4%b8%80%e5%a4%a9%e4%b8%80%e7%bb%83</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1292776275]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ruby design patterns factory method</title>
		<link>http://zires.info/2010/11/26/ruby-design-patterns-factory-method/</link>
		<pubDate>Fri, 26 Nov 2010 04:26:09 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[设计模式]]></category>

		<category domain="tag" nicename="%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f"><![CDATA[设计模式]]></category>

		<guid isPermaLink="false">http://zires.info/?p=33</guid>
		<description></description>
		<content:encoded><![CDATA[工厂方法模式：
<blockquote>it deals with the problem of creating objects (products) without specifying the exact class of object that will be created. The factory method design pattern handles this problem by defining a separate method for creating the objects, which subclasses can then override to specify the derived type of product that will be created.</blockquote>
工厂方法模式的要点在于，封装创建对象的方法，然后让子类来决定哪一个类被实例化。

YY这样一个场景：假设，有一个mm会天天送我上班，她家里有法拉利汽车和捷安特自行车，早上她会选择其中一个来接我。所以对于我来说，除非第二天我打开门，否则我不会知道她用什么送我，另外，不管她用什么送我，我的目标是按时到公司（半路可能被她拐了）。

<span style="color: #ff0000;">用java实现</span>

[cc lang="java"]
// 抽象类 交通工具
public absract class Vehicle{
  public String name;
  public void go(){}
}

// 自行车模型
public class Bike extends Vehicle{
  public void go(){
  //something}

  // 根据路程返回需要的时间
  public Time countTime(Float miles){}
}

  // 汽车模新
public class Car extends Vehicle{
  public void go(){
   // something}

  // 根据路程返回需要的时间
  public Time countTime(Float miles){}
}
[/cc]

下面处理上班的事件
[cc lang="java"]
// 抽象类 事件
public absract class Event{
  // 上班，返回是否迟到
  public boolean goToWork(Float miles){
  // factory method
  Vehicle vehicle = createVehicle();
  vehicle.go();
  // 上班需要的时间
  time = vehicle.countTime(Float miles)
  // 还可以加其他一些统一的操作
  // 是否迟到
  return onTime(time)
}

  // 计算时间，假设用自行车会迟到，汽车不会
  public boolean onTime(time){
     // 具体实现}

  //抽象方法，用来被子类实现
  protected abstract Vehicle createVehicle();
}

// 用自行车
public class UseBikeEvent extends Event{
   // 创建自行车
   protected Vehicle createVehicle(){
      return new Bike();
    }
}

// 用汽车
public class UseCarEvent extends Event{
   // 创建汽车
   protected Vehicle createVehicle(){
      return new Car();
    }
}
[/cc]

OK，下面是mm上场了
[cc lang="java"]
public class Mm{

   // 使用一种交通工具
    public Event use(String name){
      if(&quot;giant&quot;){
           UseBikeEvent.new();
       }elsif(&quot;ferrari&quot;){
           UseCarEvent.new();
       }
     }

      public boolean driveMeToWork(Event event, Float miles){
          event.goToWork(miles);
       }
}
[/cc]
下面来测试一下
[cc lang="java"]
   public static void main(String args[]){
        mm = Mm.new();
        event1 = mm.use(&quot;giant&quot;);
        mm.driveMeToWork(event1, 360);
        event2 = mm.use(&quot;ferrari&quot;);
        mm.driveMeToWork(event2, 360);
}
   结果
   false // 假设自行车会迟到
   true // 假设汽车不会迟到
[/cc]

简单说明一下，car和bike都是交通工具的模型，在他们里面不应该出现上班的行为。去上班的行为被放在了Event这个抽象类中，对于Event来说，它并不知道自己究竟用什么交通工具上班，Event负责的是计算时间，判断是否迟到，而具体的实现延迟到了UseCarEvent和UseBikeEvent这两个子类中。其实工厂方法模式在java中最核心的就是“多态”。

<span style="color: #ff6600;">下面来看看ruby是怎么做的</span>
交通工具的模型没有变化
[cc lang="ruby"]
class Vehicle
  def go ;end
end

class Car &lt; Vehicle
    def go;end
    def count_time(miles);end
end

class Bike &lt; Vehicle
    def go;end
   def count_time(miles);end
end
[/cc]
ruby 没有抽象类，但是有mixi（这里不是说mixi相当于java中的抽象类，两个概念）
[cc lang="ruby"]
module Event
   def create_vehicle;end
   def go_to_work(miles)
       vehicle = create_vehicle
       vehicle.go
       time = vehicle.count_time(miles)
       on_time?(time)
     end

    # 判断是否来得及
    def on_time?(time)
       # 返回 true 或者 false
     end
end

class  UseBikeEvent
     include Event
    def create_vehicle
        Bike.new
     end
end

class UseCarEvent
    include Event
    def create_vehicle
       Car.new
     end
end
[/cc]
MM类
[cc lang="ruby"]
class Mm
    def use(name)
       if name == &quot;giant&quot;
          UseBikeEvent.new
       elsif name == &quot;ferrari&quot;
          UseCarEvent.new
       end
end

def drive_me_to_work(event, miles)
       event.go_to_work(miles)
end
end
[/cc]
测试就不写了，下面写个有趣的，如果MM这个类也扩展一下，如下
[cc lang="ruby"]
class Mm
   include Event
   def create_vehicle
      Mm.new
    end
   # 也有go方法
   def go;end
   # 同理有count time
   def count_time(miles);end

# 陪我步行去上班
    def walk_with_me_to_work(miles)
       go_to_work(miles)
     end
end
[/cc]
可以看到ruby的mixi确实很灵活，而且没有类型检测，duck typing ，如果一个它可以开动(就是go方法)，可以计算时间，那么它就可以看成是交通工具(Vehicle)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date>2010-11-26 12:26:09</wp:post_date>
		<wp:post_date_gmt>2010-11-26 04:26:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-design-patterns-factory-method</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1292777873]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[266440630]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ruby daily practice 2</title>
		<link>http://zires.info/2010/11/27/ruby-daily-practice-2/</link>
		<pubDate>Fri, 26 Nov 2010 16:29:16 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[面试题]]></category>

		<category domain="tag" nicename="%e9%9d%a2%e8%af%95%e9%a2%98"><![CDATA[面试题]]></category>

		<guid isPermaLink="false">http://zires.info/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>给定字符串，删除开始和结尾处的空格，并将中间的多个连续的空格合并成一个。
比如 “  I like     http://www.zires.info  ” 会变成 "I like http://www.zires.info"。</blockquote>
<p>分析：分为两部分，先去除头尾的空格，再将中间的空格合并。</p>
（一）ruby的string自带了N多方法，足够操作字符串了。
[cc lang="ruby"]
example = " i like      http://www.zires.info   ";
# 使用strip 去头尾空格
example.strip # = "i like       http://www.zires.info";
# 使用squeeze 去除中间空格
# squeeze 会根据传进去的str 把符合条件的str连续相同的合并
# 所以这里我们传进去一个空格
example.squeeze(" ") # ="i like http://www/zires.info";

#合起来写
example.strip.squeeze(" ")
完成
[/cc]
（二）没有比正则表达式更适合操作字符串了
[cc lang="ruby"]
example = " i like      http://www.zires.info   ";
# 同样先使用strip
# 接着使用gsub，匹配一个或多个空格，用""替代

# 完整写
example.strip.gsub(/\s/,"")
# ="i like http://www.zires.info";
[/cc]
大功告成]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2010-11-27 00:29:16</wp:post_date>
		<wp:post_date_gmt>2010-11-26 16:29:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-daily-practice-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1292778086]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[331378077]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ruby daily practice 3</title>
		<link>http://zires.info/2010/11/29/ruby-daily-practice-3/</link>
		<pubDate>Sun, 28 Nov 2010 16:46:14 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[面试题]]></category>

		<category domain="tag" nicename="%e9%9d%a2%e8%af%95%e9%a2%98"><![CDATA[面试题]]></category>

		<guid isPermaLink="false">http://zires.info/?p=73</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>谷歌面试题：1024! 末尾有多少个0？</blockquote>
分析：1024的阶乘，就是看1024有多少的2和5，2的个数比5多，那就是看有多少5。
[cc lang="ruby"]
5的倍数，1024/5 = 204个
25的倍数，1024/25 = 40个
125的倍数，1024/125 = 8个
625的倍数：1024/625 = 1个

#所以加起来一共 253个0
[/cc]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date>2010-11-29 00:46:14</wp:post_date>
		<wp:post_date_gmt>2010-11-28 16:46:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-daily-practice-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1292778124]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[260044794]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>a.hitchcock</title>
		<link>http://zires.info/?attachment_id=99</link>
		<pubDate>Mon, 29 Nov 2010 07:26:14 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/wp-content/uploads/2010/11/xin_4503040110549532352212.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date>2010-11-29 15:26:14</wp:post_date>
		<wp:post_date_gmt>2010-11-29 07:26:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xin_4503040110549532352212</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>98</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://zires.info/wp-content/uploads/2010/11/xin_4503040110549532352212.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2010/11/xin_4503040110549532352212.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"374";s:6:"height";s:3:"300";s:14:"hwstring_small";s:23:"height='96' width='119'";s:4:"file";s:38:"2010/11/xin_4503040110549532352212.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:3:{s:4:"file";s:38:"xin_4503040110549532352212-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:38:"xin_4503040110549532352212-300x240.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"240";}s:10:"text-thumb";a:3:{s:4:"file";s:38:"xin_4503040110549532352212-184x184.jpg";s:5:"width";s:3:"184";s:6:"height";s:3:"184";}s:11:"photo-thumb";a:3:{s:4:"file";s:38:"xin_4503040110549532352212-374x299.jpg";s:5:"width";s:3:"374";s:6:"height";s:3:"299";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Alfred Hitchcock]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>zires</title>
		<link>http://zires.info/?attachment_id=102</link>
		<pubDate>Mon, 29 Nov 2010 07:28:50 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/wp-content/uploads/2010/11/large_6rDe_21884m019118.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[myself]]></content:encoded>
		<excerpt:encoded><![CDATA[zires]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2010-11-29 15:28:50</wp:post_date>
		<wp:post_date_gmt>2010-11-29 07:28:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>large_6rde_21884m019118</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>98</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://zires.info/wp-content/uploads/2010/11/large_6rDe_21884m019118.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2010/11/large_6rDe_21884m019118.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"257";s:6:"height";s:3:"249";s:14:"hwstring_small";s:22:"height='96' width='99'";s:4:"file";s:35:"2010/11/large_6rDe_21884m019118.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:35:"large_6rDe_21884m019118-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:10:"text-thumb";a:3:{s:4:"file";s:35:"large_6rDe_21884m019118-184x184.jpg";s:5:"width";s:3:"184";s:6:"height";s:3:"184";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[myself]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title></title>
		<link>http://zires.info/?p=98</link>
		<pubDate>Mon, 29 Nov 2010 07:29:44 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/?post_type=photo&#038;p=98</guid>
		<description></description>
		<content:encoded><![CDATA[[gallery]<a href="http://zires.info/?attachment_id=99" rel="attachment wp-att-99"><img src="http://zires.info/wp-content/uploads/2010/11/xin_4503040110549532352212-300x240.jpg" alt="Alfred Hitchcock" title="a.hitchcock" width="300" height="240" class="alignnone size-medium wp-image-99" /></a>[gallery] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2010-11-29 15:29:44</wp:post_date>
		<wp:post_date_gmt>2010-11-29 07:29:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>98</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>photo</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>thumb</wp:meta_key>
		<wp:meta_value><![CDATA[http://zires.info/wp-content/uploads/2010/11/xin_4503040110549532352212-300x240.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1291016758]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>zires</title>
		<link>http://zires.info/about/large_6rde_21884m019118-2/</link>
		<pubDate>Mon, 29 Nov 2010 07:47:41 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/wp-content/uploads/2010/11/large_6rDe_21884m0191181.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[zires]]></content:encoded>
		<excerpt:encoded><![CDATA[zires]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2010-11-29 15:47:41</wp:post_date>
		<wp:post_date_gmt>2010-11-29 07:47:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>large_6rde_21884m019118-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://zires.info/wp-content/uploads/2010/11/large_6rDe_21884m0191181.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2010/11/large_6rDe_21884m0191181.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"257";s:6:"height";s:3:"249";s:14:"hwstring_small";s:22:"height='96' width='99'";s:4:"file";s:36:"2010/11/large_6rDe_21884m0191181.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:36:"large_6rDe_21884m0191181-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:10:"text-thumb";a:3:{s:4:"file";s:36:"large_6rDe_21884m0191181-184x184.jpg";s:5:"width";s:3:"184";s:6:"height";s:3:"184";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Thierry Zires]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails alias_method_chain rails3</title>
		<link>http://zires.info/2010/12/01/rails-alias_method_chain-rails3/</link>
		<pubDate>Tue, 30 Nov 2010 18:58:10 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[alias_method_chain]]></category>

		<category domain="tag" nicename="alias_method_chain"><![CDATA[alias_method_chain]]></category>

		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=120</guid>
		<description></description>
		<content:encoded><![CDATA[ruby中的alias方法
[cc lang="ruby"]
class Foo
  def hello
    "Hello"
   end

  def world
    "World"
  end

  alias world hello
end

Foo.new.hello #=&gt; "Hello"
Foo.new.world #=&gt; "Hello"
[/cc]
看下面这个例子：
[cc lang="ruby"]
class Foo
  def hello
    "Hello"
  end

   alias world hello

   def world
     "World"
   end

end

Foo.new.hello #=&gt; "Hello"
Foo.new.world #=&gt; "World"
[/cc]

ok，下面假设我们要覆写ActiveRecord::Base的find方法，使之接受新的option。假设我们要传入:second，返回第二个record。
这个时候alias_method_chain就派上用场了。
[cc lang="ruby"]
class Foo < ActiveRecord::Base
class << self

  #先将find方法别名
  alias find_without_second find

  #再定义find second方法
  def find_with_second(*args)
    ......something
    p "调用find之前"
   # 调用find_without_second 其实就是find方法
   find_without_second
    p "调用find之后"
  end
  alias find find_with_second
end
end
# 看看发生了什么
Foo.find(:second)
#实际调用find_with_second，在find_with_second方法中，
#又再调用了find_without_second，也就是原生的find方法了。

[/cc]
alias_method_chain 其实是一个DSL，合并了两次alias。
[cc lang="ruby"]
alias_method_chain :find, :second
#相当于
alias find_with_second find
alias find find_without_second

[/cc]

但是，alias_method_chain有点问题，
<br />
<a href="https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/285-alias_method_chain-limits-extensibility">alias_method_chain limits extensibility</a>
在rails3 中已经不推荐使用了。

下面我们看看在rails3中如何用<strong>super</strong>关键字来实现上诉功能

[cc lang="ruby"]
class Foo < ActiveRecord::Base   
  module FindWithSecond     
    def find(*args)       
      p "处理second参数"       
      super     
     end
 end 
include FindWithSecond end 
# 测试下 
Foo.new.find(:second) #=> "处理second参数"
[/cc]
可以看到找到的是FindWithSecond中的find的方法，处理完后，通过super再找到父类的find方法。这里其实是用到了ruby的一个特性，就是include模块的先后次序，后include的模块会当成子类来看待。
[cc lang="ruby"]
class Foo

module First
end

module Second
end

include Second
include First
end

#看看Foo的祖先
Foo.ancestors #=> [Foo, Foo::First, Foo::Second, Object, Kernel]
#先include的Second当作了First的父类了
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date>2010-12-01 02:58:10</wp:post_date>
		<wp:post_date_gmt>2010-11-30 18:58:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-alias_method_chain-rails3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1293515804]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[245119885]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>2</wp:comment_id>
		<wp:comment_author><![CDATA[useful methods in rails rails3 half | zires]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://zires.info/2010/12/01/useful-methods-in-rails-rails3-half/</wp:comment_author_url>
		<wp:comment_author_IP>192.168.100.254</wp:comment_author_IP>
		<wp:comment_date>2010-12-01 15:37:30</wp:comment_date>
		<wp:comment_date_gmt>2010-12-01 07:37:30</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] 源码 alias_method_chain算是rails中一个比较重要的方法。具体看这篇文章alias_method_chain_rails3 alias_attribute [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>useful methods in rails rails3 half</title>
		<link>http://zires.info/2010/12/01/useful-methods-in-rails-rails3-half/</link>
		<pubDate>Wed, 01 Dec 2010 07:34:32 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[rails]]></category>

		<category domain="tag" nicename="rails"><![CDATA[rails]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=79</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>1）ActiveSupport::OrderedOptions.new</strong>
其实就是一个hash，但是使用更加OO的方式

[cc lang="ruby"]
h = ActiveSupport::OrderedOptions.new
#赋值
h.boy = "john"

#输出
h.boy = "john"
[/cc]

<strong>2）extract_options!</strong>
是最最常见的方法，作用在于从参数组中抽出hash，参数组哈希分离

[cc lang="ruby"]
def options(*args)
  args.extract_options!
end

options(1, 2)           # => {}
options(1, 2, :a => :b)  # => {:a=>:b}
[/cc]

<strong>3）ActiveSupport::Concern</strong>
这个是非常有用的模块，特别是写插件的时候。在rails3之前，我们给一个类扩展实例方法（instance_methods）和单例方法（class_methods）的方法如下：

[cc lang="ruby"]
module M
def self.included(base)
  base.extend, ClassMethods
  base.send(:include, InstanceMethods)
  scope :disabled, where(:disabled => true)
end

module ClassMethods
def aa
  p "我是class_methods"
end
...
end

module InstanceMethods
def bb
  p "我是instance_methods"
end
...
end
end

# 使用
class Foo
  include M
end

# 测试
foo = Foo.new
foo.aa #=>NoMethodsFind
Foo.aa #=> "我是class_methods"
foo.bb #=>"我是instance_methods"
[/cc]

在rails3 中如下写：

[cc lang="ruby"]
require 'active_support/concern'
module M
extend ActiveSupport::Concern
included do
scope :disabled, where(:disabled => true)
end

module ClassMethods
...
end

module InstanceMethods
...
end
end
# 剩下的类似
[/cc]

使用ActiveSupport::Concern还有一个最大的好处是它可以处理include的依赖关系

[cc lang="ruby"]
require 'active_support/concern'
module Foo
extend ActiveSupport::Concern
included do
class_eval do
def self.method_injected_by_foo
...
end
end
end
end

module Bar
extend ActiveSupport::Concern
include Foo

included do
self.method_injected_by_foo
end
end

class Host
include Bar # 这边只要include Bar就可以了，而不需要include Foo模块
end

[/cc]

# 更详细的看代码 <a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/concern.rb">concern</a>

<strong>4）delegate </strong>
<a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/module/delegation.rb">源码</a>
代理用在active_record上特别有效，提供了极大的方便。

[cc lang="ruby"]
class Foo < ActiveRecord::Base
  def hello
    "Hello"
  end

  def world
    "World"
  end
end

class Brr < ActiveRecord::Base
belongs_to :Foo
# 使用delegate 将方法a代理给类B
# 至少代理一个方法,to选项必填
delegate :hello, :to => :foo
end

# 测试
Brr.new.hello # => "Hello"
Brr.new.world # => NoMethodError
[/cc]

还可以代理实例变量，类变量，常量，还可以带allow_nil和prefix选项，具体看api文档了。

<strong>5）alias_method_chain和alias_attribute</strong>
<a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/module/aliasing.rb">源码</a>
alias_method_chain算是rails中一个比较重要的方法。具体看这篇文章<a style="color: #ff6600;" href="http://zires.info/2010/12/01/rails-alias_method_chain-rails3/">alias_method_chain_rails3</a>
alias_attribute 给属性定义别名的，api中的例子：

[cc lang="ruby"]
class Content < ActiveRecord::Base
# has a title attribute
end

class Email < Content
alias_attribute :subject, :title
end

e = Email.find(1)
e.title    # => "Superstars"
e.subject  # => "Superstars"
e.subject? # => true
e.subject = "Megastars"
e.title    # => "Megastars"

[/cc]

说两点，第一，alias_attribute接受的参数，第一个是new_name，第二个是old_name；
第二，new_name和old_name捆绑了，一个改变会带动另一个改变，另外alias_attribute会生成四个以new_name为前缀的方法，如下：

[cc lang="ruby"]
Email.instance_methods(false)
# => ["_changed?", "_change", "_will_change!", "_was"]
e.subject_changed? #=> true
e.subject_change #=> ["", "Megastars"]
[/cc]

========待续===============]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2010-12-01 15:34:32</wp:post_date>
		<wp:post_date_gmt>2010-12-01 07:34:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>useful-methods-in-rails-rails3-half</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1293515466]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[278880265]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ruby ugly number</title>
		<link>http://zires.info/2010/12/13/ruby-ugly-number/</link>
		<pubDate>Sun, 12 Dec 2010 16:00:38 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[面试题]]></category>

		<category domain="tag" nicename="%e9%9d%a2%e8%af%95%e9%a2%98"><![CDATA[面试题]]></category>

		<guid isPermaLink="false">http://zires.info/?p=140</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>题目：我们把只包含因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含因子7。习惯上我们把1当做是第一个丑数。 求按从小到大的顺序的第1500个丑数。</blockquote>
想法：判断一个数是否是丑数，其实就是看它的所有质数因子是否只有2，3，5，也就转化为求一个数的质数因子（素数因子）。<span style="color: #ff0000;">后面会发现这个想法只是概念上的想法，实际上效率低的可怜</span>

素数真是太有意思了，哥德巴赫猜想，<a href="http://baike.baidu.com/view/1767.htm">素数的百度百科</a>

[cc lang="ruby"]
# 判断是否为素数
class Integer
  def prime?
      # 1 不是素数
      return false if self == 1
      2.upto(self - 1) { |i| return false if self%i == 0}
      true
  end
end

#测试
73.prime? # => true
[/cc]

下面来求一个数所有的素因子

[cc lang="ruby"]
class Integer
  def primes
   (2..self).find_all { |i| self%i == 0 and i.prime?}
  end
end

#测试
100.primes # => [2,5]
[/cc]

判断是否为丑数

[cc lang="ruby"]
class Integer
	def ugly?
	  self.primes.uniq.delete_if {|x| [2,3,5].include?(x)}.empty?
	end
end

#测试
14.ugly？ # => false
[/cc]

下面来求

[cc lang="ruby"]
arr = [1]
n = 2
loop do
	arr &lt;&lt; n if n.ugly?
	n = n.next
	break if arr.size == 99
end

p arr.last # => 1500
[/cc]

计算第99个已经用1s多了，第1500个不知道到什么时候呢，这样做只是用程序描诉了一遍概念，实际太耗时间了。

<span style="color: red;">算法</span>
<blockquote>可以看到丑数数组里面的每一个丑数是前面的丑数乘以2、3或者5得到的，由于顺序排列，必须将已知丑数组中最大数，假设是M，分别乘2，3，5，然后在得到的三个数中取出最小并且大于M的，这就是下一个丑数</blockquote>
改进后的写法

[cc lang="ruby"]
def find_ugly_number(index)
 # 初始队列
 queue = [1]
 # 临时队列
 temp = []
 # 初始值
 m = 1
 # 初始位置
 position = 1
 until (position == index)
  [2,3,5].each do |i|
    temp < < i * m
  end 
  m = temp.uniq.sort[position -1]
  queue << m
  position += 1
  end
  queue.last
end

#测试 大概用时1s
p find_ugly_number(1500) #=> 859963392
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date>2010-12-13 00:00:38</wp:post_date>
		<wp:post_date_gmt>2010-12-12 16:00:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-ugly-number</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1292778646]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[279890117]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ruby daily practice 4</title>
		<link>http://zires.info/2010/12/20/ruby-daily-practice-4/</link>
		<pubDate>Sun, 19 Dec 2010 16:54:45 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[面试题]]></category>

		<category domain="tag" nicename="%e9%9d%a2%e8%af%95%e9%a2%98"><![CDATA[面试题]]></category>

		<guid isPermaLink="false">http://zires.info/?p=77</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>给定能随机生成整数1到5的函数，写出能随机生成整数1到7的函数</blockquote>
我的想法：一个函数已经可以生成1到5的随机数了，那么只要在它的返回值，6，7中再随机返回一个，就是随机生成1到7的函数了。
题解：<span style="color: #0e13f0;">这道题目的关键是让生成的 1 到 7 的数出现概率相同</span>。
总结：我又想简单了:&lt; ，按照我原先的想法，6，7的概率明显要高于1到5，所以这道题关键是如何将1到5等概率的放大。

解法1：
[cc lang="ruby"]
# n 个数中随机选出 1 到 n 个数，反复进行这种运算，直到剩下最后一个数即可
# 例如 
arr = [1,2,3,4,5,6,7]
rand5 # => 返回1到5中任意一个数字
# 反复7次rand5函数得到一个数组
# 
b = [3, 4, 4, 4, 2]

# arr 去除b中有的元素
c = arr -b # => [1,5,6,7]
# 这里c已经小于5了
# 下面可以自定义取值规则，但必须通过rand5函数
# 例如我们规定取调用rand5，最小值的位置
# 四次
d = [4,2,4,3] 
# 最小值是2，位置是1，为什么这里可以这样呢？
# 因为在d中每个位置出现最小值的概率是一样的
所以最后的返回值为
c.at(1) #=> 5
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2010-12-20 00:54:45</wp:post_date>
		<wp:post_date_gmt>2010-12-19 16:54:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-daily-practice-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1292777687]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[257037031]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>git 备忘</title>
		<link>http://zires.info/2010/12/23/git-%e5%a4%87%e5%bf%98/</link>
		<pubDate>Thu, 23 Dec 2010 13:47:37 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[git]]></category>

		<category domain="category" nicename="git"><![CDATA[git]]></category>

		<category domain="tag"><![CDATA[git]]></category>

		<category domain="tag" nicename="git"><![CDATA[git]]></category>

		<category domain="tag"><![CDATA[备忘]]></category>

		<category domain="tag" nicename="%e5%a4%87%e5%bf%98"><![CDATA[备忘]]></category>

		<guid isPermaLink="false">http://zires.info/?p=222</guid>
		<description></description>
		<content:encoded><![CDATA[1）如何取消上一次的提交
[cc lang="ruby"]
git reset --soft HEAD^
git commit -a -c ORIG_HEAD #ORIG_HEAD 是reset时对HEAD的拷贝
[/cc]
2）如何取消全部的本地修改
[cc lang="ruby"]
# 如果你没有提交
git checkout .
# 如果你提交了先
git reset
# 然后
git checkout .
[/cc]
3）如果我想切另外一个分支，但是当前分支有了修改，当前分支修改还没有完成，所以又不想提交，怎么办？
[cc lang="ruby"]
# 临时保存当前分支的修改
git stash
# 更复杂点
git stash save [--keep-index] [<message>]
# 列出所有的stash
git stash list
# 恢复
git stash apply
# or
git stash pop
[/cc]</message>
<strong style="color:#ff0000;">注意：这个命令不会保存当前分支中Untracked的文件，所以记得在切到其他分支的时候，谨慎使用git clean</strong>

4）设定user name 和 email
[cc lang="ruby"]
# 全局设定
git config --global user.name "zires"
git config --global user.email "xxx@xx.com"

# 或者切到一个单独的repos中单独设置
git config user.name "zires"
git config user.email "xxx@xx.com"
[/cc]
5）打补丁
[cc lang="ruby"]
# git format-patch -n {commit_id}
git format-patch -1 {commit_id}
# 会生成一个0001-{commit message}.patch的文件

git am 0001-{commit message}.patch.patch # 或者
git apply 0001-{commit message}.patch.patch
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date>2010-12-23 21:47:37</wp:post_date>
		<wp:post_date_gmt>2010-12-23 13:47:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-%e5%a4%87%e5%bf%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1297817223]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[325559461]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails rails3 备忘 </title>
		<link>http://zires.info/2010/12/23/rails-rails3-%e5%a4%87%e5%bf%98/</link>
		<pubDate>Thu, 23 Dec 2010 14:04:06 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[deprecated]]></category>

		<category domain="tag" nicename="deprecated"><![CDATA[deprecated]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[备忘]]></category>

		<category domain="tag" nicename="%e5%a4%87%e5%bf%98"><![CDATA[备忘]]></category>

		<guid isPermaLink="false">http://zires.info/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[<p>有些东西可能看起来很简单，并且可能确实很简单。下面都是在实际过程中遇到过的问题，好记性不如烂笔头，花几分钟记下来，何乐不为呢？</p>

1）rails3  deprecated的方法
[cc lang="ruby"]
# 前面是不推荐的做法
save(false) == save(:validate => false)
[/cc] 
2）strip_links(html)和strip_tags(html)
[cc lang="ruby"]
strip_links('<a href="http://www.rubyonrails.org">Ruby on Rails</a>')
# => Ruby on Rails
strip_tags("Strip <i>these</i> tags!")
# => Strip these tags!
[/cc]
3）实例变量和类变量
<p>详见，<a href="http://zires.info/2011/01/04/ruby-class_variables-and-instance_variables/"> 实例变量和类变量的区别 </a><br /></p>
4）引入FileUtils模块
[cc lang="ruby"]
require 'fileutils.rb'
include FileUtils
[/cc]
5）动态创建方法（dynamically define method）
http://ruby.dzone.com/news/dynamically-created-methods-ru
6）某一个action只想完成自己的事，而不渲染页面
[cc lang="ruby"]
render :nothing => true
# 只返回200状态码
[/cc]
7）文件上传如何测试，我们知道，单单给出文件的磁盘地址是不够的，幸好rails有<strong>fixture_file_upload</strong>来模拟一个文件上传的路径
[cc lang="ruby"]
# 2.x版本在spec_helper.rb文件中增加
include ActionController::TestProcess
# rails3 版本在 spec_helper.rb文件中增加
include ActionDispatch::TestProcess

Image.new(:attachment => fixture_file_upload('/home/zires/guan1.gif', 'image/gif'))

[/cc]
8）大文件的下载，当我们的下载文件不在public下（不是所有人都能访问的时候）,send_file解决了这个问题
[cc lang="ruby"]
before_filter :login_required
def download
    send_file '/home/railsway/downloads/huge.zip', :type=>"application/zip", :x_sendfile=>true
end
# x_sendfile 参数确保了Lighttpd/Apache2服务器下，只占用很少的内存，并且不会堵塞其他的请求

[/cc]
9）rails3中不 escape tags
[cc lang="ruby"]
< %=raw @user.post %>
[/cc]
10）Gemfile 中指定branch tag ref
[cc lang="ruby"]
gem 'xxxxx',
        :git => 'git://github.com/xx.git',
        :branch => 'xx',
        :tag => 'xxxxx',
        :ref => 'xxxx'
[/cc]
11）String#constantize 和 Object#const_get
在元编程的时候，有时需要动态生成method，如何把一个字符串转成类呢？例如option_type转成OptionType，并且能响应find方法。
[cc lang="ruby"]
"option_type".camelize #=> "OptionType"
"option_type".camelize.constantize #=> OptionType
"option_type".camelize.constantize.send(:find, 1)

# or
class String
  def to_class
    Object.const_get(self)
  end
end
[/cc]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2010-12-23 22:04:06</wp:post_date>
		<wp:post_date_gmt>2010-12-23 14:04:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-rails3-%e5%a4%87%e5%bf%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1297817172]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[rails3-%e5%a4%87%e5%bf%98]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_f502efe6e35498ef6219eb13abbbf35a</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[245120442]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails3 change default resources route name</title>
		<link>http://zires.info/2010/12/30/rails3-change-default-resources-route-name/</link>
		<pubDate>Thu, 30 Dec 2010 01:17:55 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category domain="tag"><![CDATA[routes]]></category>

		<category domain="tag" nicename="routes"><![CDATA[routes]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=250</guid>
		<description></description>
		<content:encoded><![CDATA[rails3的路由足够强大，可以基本上配出你想要的任意url。
现在有这样一个需求：
将[cci lang="ruby"]resources :posts[/cci] 改为 [cci lang="ruby"]resources :pages[/cci]（controller 还是走posts）。
如何实现？
非常简单
[cc lang="ruby"]
resources :page, :controller => :posts
# 看看生成的路由
page_index GET    /page(.:format)      {:controller=>"posts", :action=>"index"}
page_index POST   /page(.:format)     {:controller=>"posts", :action=>"create"}
new_page GET    /page/new(.:format)  {:controller=>"posts", :action=>"new"}
edit_page GET    /page/:id/edit(.:format) {:controller=>"posts", :action=>"edit"}
page GET    /page/:id(.:format)   {:controller=>"posts", :action=>"show"}
page PUT    /page/:id(.:format)   {:controller=>"posts", :action=>"update"}
page DELETE /page/:id(.:format) {:controller=>"posts", :action=>"destroy"}
[/cc]
OK!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date>2010-12-30 09:17:55</wp:post_date>
		<wp:post_date_gmt>2010-12-30 01:17:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails3-change-default-resources-route-name</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1293671929]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[273219515]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ruby class_variables and instance_variables</title>
		<link>http://zires.info/2011/01/04/ruby-class_variables-and-instance_variables/</link>
		<pubDate>Tue, 04 Jan 2011 03:36:30 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[variables]]></category>

		<category domain="tag" nicename="variables"><![CDATA[variables]]></category>

		<guid isPermaLink="false">http://zires.info/?p=272</guid>
		<description></description>
		<content:encoded><![CDATA[Ruby 中的类变量和实例变量
<p>例子</p>
[cc lang="ruby"]
class Foo
	@instance_variable = "I am a instance_variable"
	@@class_variable = "I am a class_variable"
	
	def	just_output
		p @instance_variable
		p @@class_variable
	end
end

Foo.instance_variables
  #=>   ["@instance_variable"]

Foo.class_variables
  #=>  ["@@class_variable"]

Foo.new.just_output
  #=>  nil
  #=>  "I am a class_variable"
[/cc]
说明：可以看到，实例变量赋初始值都是nil（在初始化 initialization 中除外），而类变量是可以有初始值的。
<p>下面看看作用范围</p>
[cc lang="ruby"]
class Foo
	@instance_variable = "I am a instance_variable"
	@@class_variable = "I am a class_variable"
	
	def	change
		@instance_variable = "Changed!"
		@@class_variable = "Changed!"	
	end
	
	def	just_output
		p @instance_variable
		p @@class_variable
	end
end

foo = Foo.new
foo.change
foo.just_output
  #=>  "Changed!"
  #=>  "Changed!"
# 上面的输出可能看不出区别，继续

bar = Foo.new
bar.just_output
  #=>  nil
  #=>  "Changed!"
[/cc]
说明：实例变量单个实例共享，所以@instance_variable只在 foo 这个实例有值，到 bar 这个实例又是 nil 了。类变量的作用范围是类，所以 foo 和 bar 都是 Foo的实例，都有类变量 @@class_variable 。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date>2011-01-04 11:36:30</wp:post_date>
		<wp:post_date_gmt>2011-01-04 03:36:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-class_variables-and-instance_variables</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1294112192]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[245119892]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>8</wp:comment_id>
		<wp:comment_author><![CDATA[rails rails3 备忘 | zires]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://zires.info/2010/12/23/rails-rails3-%e5%a4%87%e5%bf%98/</wp:comment_author_url>
		<wp:comment_author_IP>192.168.100.254</wp:comment_author_IP>
		<wp:comment_date>2011-01-04 11:38:48</wp:comment_date>
		<wp:comment_date_gmt>2011-01-04 03:38:48</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] 3）实例变量和类变量 详见， 实例变量和类变量的区别  [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>73</wp:comment_id>
		<wp:comment_author><![CDATA[Web hosting India]]></wp:comment_author>
		<wp:comment_author_email>stream.best@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.web-hosting-service.in/</wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2011-04-25 09:20:00</wp:comment_date>
		<wp:comment_date_gmt>2011-04-25 09:20:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Nice post and useful for me.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>centos nginx init script</title>
		<link>http://zires.info/2011/01/07/centos-nginx-init-script/</link>
		<pubDate>Fri, 07 Jan 2011 08:39:06 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[centos]]></category>

		<category domain="category" nicename="centos"><![CDATA[centos]]></category>

		<category domain="tag"><![CDATA[init.d]]></category>

		<category domain="tag" nicename="init-d"><![CDATA[init.d]]></category>

		<category><![CDATA[nginx]]></category>

		<category domain="category" nicename="nginx"><![CDATA[nginx]]></category>

		<category domain="tag"><![CDATA[nginx]]></category>

		<category domain="tag" nicename="nginx"><![CDATA[nginx]]></category>

		<guid isPermaLink="false">http://zires.info/?p=280</guid>
		<description></description>
		<content:encoded><![CDATA[解决在 /etc/init.d/ 下找不到nginx的问题。
原来通过source安装的nginx默认不会新建init脚本，一开始我还以为自己安装出错了，折腾半天。

<p>网上找了篇比较好的文章，自己新建 init 脚本。<a href="http://articles.slicehost.com/2009/2/2/centos-adding-an-nginx-init-script" style="color:#ff0000;">centos-adding-an-nginx-init-script</a></p>
copy 如下：
[cc lang="bash"]
#!/bin/sh
#
# nginx - this script starts and stops the nginx daemin
#
# chkconfig:   - 85 15 
# description:  Nginx is an HTTP(S) server, HTTP(S) reverse \
#               proxy and IMAP/POP3 proxy server
# processname: nginx
# config:      /usr/local/nginx/conf/nginx.conf
# pidfile:     /usr/local/nginx/logs/nginx.pid

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

nginx="/usr/local/sbin/nginx"
prog=$(basename $nginx)

NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"

lockfile=/var/lock/subsys/nginx

start() {
    [ -x $nginx ] || exit 5
    [ -f $NGINX_CONF_FILE ] || exit 6
    echo -n $"Starting $prog: "
    daemon $nginx -c $NGINX_CONF_FILE
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    killproc $prog -QUIT
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    configtest || return $?
    stop
    start
}

reload() {
    configtest || return $?
    echo -n $"Reloading $prog: "
    killproc $nginx -HUP
    RETVAL=$?
    echo
}

force_reload() {
    restart
}

configtest() {
  $nginx -t -c $NGINX_CONF_FILE
}

rh_status() {
    status $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart|configtest)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
            ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
        exit 2
esac
[/cc]
<span style="color:#ff0000;">注意</span>：自己替换对应的nginx和nginx配置文件路径。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2011-01-07 16:39:06</wp:post_date>
		<wp:post_date_gmt>2011-01-07 08:39:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>centos-nginx-init-script</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1294390931]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>fcgi，scgi，wsgi，cgi</title>
		<link>http://zires.info/2011/01/16/fcgi-scgi-wsgi-cgi/</link>
		<pubDate>Sun, 16 Jan 2011 08:10:22 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[cgi]]></category>

		<category domain="tag" nicename="cgi"><![CDATA[cgi]]></category>

		<category domain="tag"><![CDATA[fcgi]]></category>

		<category domain="tag" nicename="fcgi"><![CDATA[fcgi]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[scgi]]></category>

		<category domain="tag" nicename="scgi"><![CDATA[scgi]]></category>

		<category domain="tag"><![CDATA[wsgi]]></category>

		<category domain="tag" nicename="wsgi"><![CDATA[wsgi]]></category>

		<guid isPermaLink="false">http://zires.info/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[<p>我常常想，web开发的本质是什么？站在最终用户的角度，无非就是用浏览器将网页显示出来。网页又是什么？其实就是HTML。HTML是什么？其实就是浏览器认识的语言，例如，通过HTML告诉浏览器这边我需要一个链接（a标签），那么我们就能看到一段链接。如果只是单纯的静态页面，就像广告那样纯粹的显示，那么可能根本用不着java，ruby等语言，HTML就够了。</p>
<p><strong>CGI</strong>是什么？</p>
Common Gate Interface的简称，通用网关接口。是一段跑在服务器上的程序，用来处理用户请求的。
<p>为嘛要CGI？</p>
现在的网页远远不像静态页面那么简单，我们常常要拿到用户的输入，然后再返回相应的页面，所以在服务器端的程序必须有能动态的生成HTML的能力。CGI既然是接口，接的也就是服务器和客户端。当然了，理论上，任何有输入输出能力的语言都可以用来写CGI。
<p>简单的CGI例子：</p>
第一步，配置Apache：
CGI当然不是随便就能跑的，当然要在服务器上做一些设置了。配置也很简单。
1）首先确定安装了apache2
2）默认的cgi-bin目录在/usr/lib/下，在里面用perl写一段代码，保存为hw.pl，具体可以看<a href="http://man.chinaunix.net/newsoft/ApacheManual/howto/cgi.html">Apache官方文档</a>
[cc lang="perl"]
#! /usr/bin/perl
print "Content-type: text/html\n\n";
print "<a href='www.google.com'>Hello, World.</a>"; 
[/cc]
3）可能的话要给该文件hw.pl加上chmod a+x 可执行的权限。
4）访问http://localhost/cgi-bin/hw.pl 就可以看见标准的"Hello，World."链接了。

<p><strong>FCGI又是什么？</strong></p>
FCGI全称是FastCGI，顾名思义，就是比CGI快，<a href="http://baike.baidu.com/view/641394.html">fcgi的百度百科</a>。FCGI和CGI都是语言无关的，FCGI以多消耗内存来换取速度。

<p><strong>SCGI是什么？</strong></p>
其实这些都是为了更好的取代CGI的功能，SCGI全称Simple Common Gateway Interface。顾名思义，这个就是简单咯。scgi也是客户端/服务器端形式，客户端发送请求，处理，服务器端响应请求。简而言之，SCGI定义了发送或者响应报文形式的协议。也是和语言无关的。

<p><strong>WSCGI是什么？</strong></p>
WSGI全称Web Server Gateway Interface。WSGI是python特有的，不过只要实现了他的协议，WSGI也可以跑在任何服务器上。另外ruby中的Rack也借鉴了WSGI。

其实具体协议的内容没必要探究，只需要知道他们处理的问题是什么就够了。
一些链接
<a href="http://stackoverflow.com/questions/219110/how-python-web-frameworks-wsgi-and-cgi-fit-together">how-python-web-frameworks-wsgi-and-cgi-fit-together</a>
<a href="http://stackoverflow.com/questions/1747266/is-there-a-speed-difference-between-wsgi-and-fcgi">is-there-a-speed-difference-between-wsgi-and-fcgi</a>
<a href="http://stackoverflow.com/questions/257481/whats-the-difference-between-scgi-and-wsgi">whats-the-difference-between-scgi-and-wsgi</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2011-01-16 16:10:22</wp:post_date>
		<wp:post_date_gmt>2011-01-16 08:10:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fcgi-scgi-wsgi-cgi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1295165423]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[246604621]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ruby private vs protected</title>
		<link>http://zires.info/2011/01/20/ruby-private-vs-protected/</link>
		<pubDate>Thu, 20 Jan 2011 14:03:22 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[private]]></category>

		<category domain="tag" nicename="private"><![CDATA[private]]></category>

		<category domain="tag"><![CDATA[protected]]></category>

		<category domain="tag" nicename="protected"><![CDATA[protected]]></category>

		<category domain="tag"><![CDATA[ruby]]></category>

		<category domain="tag" nicename="ruby"><![CDATA[ruby]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=318</guid>
		<description></description>
		<content:encoded><![CDATA[ruby中控制访问属性的关键字有三个，<strong>public</strong>，<strong>protected</strong>，和<strong>private</strong>。
<p>public不多说了。来看看protected和private。</p>
<p>我们知道，访问权限关心的一般只有两方面，一个是实例，另一个是继承。</p>
<p style="color:#ff0000;">先抛出结论：在ruby中，protected和private都只在类的定义内访问有效，并且可以被继承，但是实例和继承访问都会抛出NoMethodError，另外，两者区别是，protected可以有明确的方法接收者，而private不可以。</p>
<p>注意比较区别，例子如下：</p>
[cc lang="ruby"]
class Foo
  def a
    b
  end
    
  def aa
    c
  end

  def f
     self.b
  end

  def ff
     self.c
  end	
protected
	def	b
		p  "protected method from Foo"
	end
private
	def	c
		p  "private method form Foo"
	end
end

class Bar < Foo
end

Foo.new.b #=> NoMethodError
Foo.new.c #=> NoMethodError
Bar.new.b #=> NoMethodError
Bar.new.c #=> NoMethodError

#======
Foo.new.a    #=> "protected method from Foo"
Foo.new.aa  #=> "private method form Foo"

#======
Foo.new.f #=>  "protected method from Foo"
Foo.new.ff  #=> NoMethodError
[/cc]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date>2011-01-20 22:03:22</wp:post_date>
		<wp:post_date_gmt>2011-01-20 14:03:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-private-vs-protected</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1296113206]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[250579446]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails3 respond_with</title>
		<link>http://zires.info/2011/01/20/rails3-respond_with/</link>
		<pubDate>Thu, 20 Jan 2011 14:36:46 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category domain="tag"><![CDATA[respond_with]]></category>

		<category domain="tag" nicename="respond_with"><![CDATA[respond_with]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[rails3有个新的controller跳转方法叫respond_with，rails总是不忘自己的哲学-“不要重复自己”，在rails2.x的版本中，下面的写法比较常见：
[cc lang="ruby"]
class PostsController < ApplicationController::Base

  def index
    @posts = Post.all
    respond_to do |format|
      format.html
      format.xml { render :xml => @posts.to_xml }
      format.json { render :json => @posts.to_json }
    end
  end

  def create
    @post = Post.create(params[:post])
    respond_to do |format|
      format.html { redirect_to posts_url }
      format.xml { render :xml => @post.to_xml }
      format.json { render :json => @post.to_json }
    end
  end
end
[/cc]
又臭又长，有了respond_with，就变成如下了：
[cc lang="ruby"]
class PostsController < ApplicationController::Base

  respond_to :html, :xml, :json

  def index
    respond_with(@posts = Post.all)
  end

  def create
    @post = Post.create(params[:post])
    respond_with(@post)
  end
end

[/cc]
多清爽啊，respond_with会根据请求的类型，自动的返回html，xml，或者json。当然了，respond_with也可以override来调整到需要的。
1）status，head
[cc lang="ruby"]
  respond_with(@posts = Post.all, :status => 200, :head => :ok)
[/cc]

2）override
[cc lang="ruby"]
respond_with(@posts) do |format|
    format.html { redirect_to posts_url }
end
[/cc]

3）any，匹配任意的格式
[cc lang="ruby"]
respond_with(@posts) do |format|
    format.any(:xml, :json) { redirect_to posts_url }
end
[/cc]

4）:location，类似上面的2 
[cc lang="ruby"]
respond_with(@posts, :location => posts_url)
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date>2011-01-20 22:36:46</wp:post_date>
		<wp:post_date_gmt>2011-01-20 14:36:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails3-respond_with</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1309177557]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>74</wp:comment_id>
		<wp:comment_author><![CDATA[老宋]]></wp:comment_author>
		<wp:comment_author_email>oldsong@rubyer.me</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2011-06-27 09:08:00</wp:comment_date>
		<wp:comment_date_gmt>2011-06-27 09:08:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[看好感觉respond_with 这个方法的确很帅，奇怪的是rails new 创建工程时还是用respond_to,有点遗憾呀 ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>75</wp:comment_id>
		<wp:comment_author><![CDATA[]]></wp:comment_author>
		<wp:comment_author_email>zshuaibin@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2011-06-27 12:37:00</wp:comment_date>
		<wp:comment_date_gmt>2011-06-27 12:37:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[rails的scaffold一直都是沿用的老的respond_to方法，这是为了方便初学者理解，毕竟respond_with还是比较含蓄的。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>74</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>rails3 初始化和启动 Initialization Process</title>
		<link>http://zires.info/2011/02/13/rails3-%e5%88%9d%e5%a7%8b%e5%8c%96%e5%92%8c%e5%90%af%e5%8a%a8-initialization-process/</link>
		<pubDate>Sat, 12 Feb 2011 19:25:31 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[Initialization]]></category>

		<category domain="tag" nicename="initialization"><![CDATA[Initialization]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=231</guid>
		<description></description>
		<content:encoded><![CDATA[一直想搞清楚rails的启动和整个生命进程，好在有官方的guide用来参考，<a href="http://ryanbigg.com/guides/initialization.html">The Rails Initialization Process</a>。
1）<strong>先来看看rails的组织结构</strong>
[cc lang="ruby"]
%w(
  actionmailer
  actionpack
  activemodel
  activerecord
  activeresource
  activesupport
  railties
)
[/cc]

2）<strong>rails是如何启动的？</strong>
按下‘rails s’ 命令发生了什么？
rails3中rails已经变成了一个全局的命令，s是它的参数，s是server的缩写。
rails命令在gem包的bin/rails脚本中
[cc lang="ruby"]
#!/usr/bin/env ruby

begin
  require "rails/cli"
rescue LoadError
  railties_path = File.expand_path('../../railties/lib', __FILE__)
  $:.unshift(railties_path)
  require "rails/cli"
end
[/cc]
如果找不到rails/cli就把railties_path加到当前环境变量中。railties作用是将每个rails模块串联起来，它负责rails的启动顺序，管理rails的命令行接口，并且提供Rails的generators。
<p>" rails/cli " 是负责什么的？</p>
[cc lang="ruby"]
require 'rbconfig'
require 'rails/script_rails_loader'

# If we are inside a Rails application this method performs an exec and thus
# the rest of this script is not run.
Rails::ScriptRailsLoader.exec_script_rails!

require 'rails/ruby_version_check'
Signal.trap("INT") { puts; exit(1) }

if ARGV.first == 'plugin'
  ARGV.shift
  require 'rails/commands/plugin_new'
else
  require 'rails/commands/application'
end

[/cc]

rbconfig是对ruby标准库的配置和补充，在ruby编译的时候起效，和rails关系不大，不谈。
走进script_rails_loader.rb文件，里面定义了两个常量
[cc lang="ruby"]
RUBY = File.join(*RbConfig::CONFIG.values_at("bindir", "ruby_install_name")) + RbConfig::CONFIG["EXEEXT"]
SCRIPT_RAILS = File.join('script', 'rails')
[/cc]
RUBY是ruby的bin文件位置，不管是Mac OS还是Windows还是其他，都会指向可执行文件。
SCRIPT_RAILS就是指向rails生成项目script目录下的rails脚本。大体内容如下：
[cc lang="ruby"]
#!/usr/bin/env ruby
# This command will automatically be run when you run "rails" with Rails 3 gems installed from the root of your application.

APP_PATH = File.expand_path('../../config/application',  __FILE__)
require File.expand_path('../../config/boot',  __FILE__)
require 'rails/commands'

[/cc]

回到cli文件中，下一句可以看到执行了一个方法
[cc lang="ruby"]
Rails::ScriptRailsLoader.exec_script_rails!
[/cc]
exec_script_rails!方法的内容：
[cc lang="ruby"]
def self.exec_script_rails!
      cwd = Dir.pwd
      return unless in_rails_application? || in_rails_application_subdirectory?
      exec RUBY, SCRIPT_RAILS, *ARGV if in_rails_application?
      Dir.chdir("..") do
        # Recurse in a chdir block: if the search fails we want to be sure
        # the application is generated in the original working directory.
        exec_script_rails! unless cwd == Dir.pwd
end
[/cc]
<p> exec RUBY, SCRIPT_RAILS, *ARGV 这边大致上可以看出端倪了，这行代码的实质是：</p>
[cc lang="ruby"]
ruby script/rails [arguments]
# 这里的arguments 可以是server, generate, console等
[/cc]

<p>OK，重点来看看script/rails </p>
首先有一个<strong>APP_PATH</strong>的常量，可以看到指向的是config目录下的application.rb文件。接着require了boot文件和commands文件。这里可以看到boot文件是第一个被载入的。
<p>boot文件的任务其实很简单，就是准备好Gemfile中的gems。</p><p>
[cc lang="ruby"]
# rubygems第一个被加载
require 'rubygems'

# Set up gems listed in the Gemfile.
gemfile = File.expand_path('../../Gemfile', __FILE__)
begin
    ENV['BUNDLE_GEMFILE'] = gemfile
    require 'bundler'
    Bundler.setup
rescue Bundler::GemNotFound => e
    STDERR.puts e.message
    STDERR.puts "Try running `bundle install`."
    exit!
end if File.exist?(gemfile)

[/cc]

</p><p>命令行的实质就全在rails/commands.rb中了，源码地址<a href="https://github.com/rails/rails/blob/master/railties/lib/rails/commands.rb">commands.rb</a></p>
[cc lang="ruby"]
ARGV < < '--help' if ARGV.empty?

aliases = {
  "g" => "generate",
  "c" => "console",
  "s" => "server",
  "db" => "dbconsole"
}

command = ARGV.shift
command = aliases[command] || command

[/cc]
<p>可以看到这里的ARGV就是上面提到的exec RUBY, SCRIPT_RAILS, *ARGV后面的参数，也就是我们传进去的"server，generate，console"等等。这里为空就是"--help"，并且还有4个aliases方便简写。</p>

<p>主要还是看server是如何启动的。</p>
[cc lang="ruby"]
when 'server'
  # Change to the application's path if there is no config.ru file in current dir.
  # This allows us to run script/rails server from other directories, but still get
  # the main config.ru and properly set the tmp directory.
  Dir.chdir(File.expand_path('../../', APP_PATH)) unless File.exists?(File.expand_path("config.ru"))

  require 'rails/commands/server'
  Rails::Server.new.tap { |server|
    # We need to require application after the server sets environment,
    # otherwise the --environment option given to the server won't propagate.
    require APP_PATH
    Dir.chdir(Rails.application.root)
    server.start
  }
[/cc]
<p>上面代码有三点，第一是实例化了Rails::server，第二是require APP_PATH（也就是application.rb），第三调用了server#start方法</p>
<p>实例化了一个Rails::Server，这是个什么东东？参考源码<a href="https://github.com/rails/rails/blob/master/railties/lib/rails/commands/server.rb">commands/server.rb</a></p>
[cc lang="ruby"]
require 'fileutils'
require 'optparse'
require 'action_dispatch'

module Rails
  class Server < ::Rack::Server
    ......
  end
end
[/cc]
<p>原来Rails::Server继承了Rack::Server（终于和Rack挂钩了），Rack::Server用来给所有基于rack的应用提供一般的server接口。而且，这里第一次引入了action_dispatch。Rails::Server的initialize方法如下：
[cc lang="ruby"]
def initialize(*)
      super
      set_environment
end
[/cc]
<strong>super</strong>，<a href="https://github.com/rack/rack/blob/master/lib/rack/server.rb">Rack::Server源码</a>那么Rack::Server的initialize方法如下：
[cc lang="ruby"]
def initialize(options = nil)
      @options = options
      @app = options[:app] if options && options[:app]
end
[/cc]
由于options为nil所以Rack::Server中的initialize无作为，回到Rails::Server中，super的下一句是set_environment，代码如下：
[cc lang="ruby"]
def set_environment
      ENV["RAILS_ENV"] ||= options[:environment]
end
[/cc]
<p>一目了然，设定环境咯，production，development，还是test。这里options是父类Rack::Server中的：</p>
[cc lang="ruby"]
def options
      @options ||= parse_options(ARGV)
end

def parse_options(args)
    options = default_options

    # Don't evaluate CGI ISINDEX parameters.
    # http://hoohoo.ncsa.uiuc.edu/cgi/cl.html
    args.clear if ENV.include?("REQUEST_METHOD")

    options.merge! opt_parser.parse! args
    options[:config] = ::File.expand_path(options[:config])
    ENV["RACK_ENV"] = options[:environment]
    options
end
[/cc]
<p>default_options在Rails::Server中被覆写了：</p>
[cc lang="ruby"]
def default_options
      super.merge({
        :Port => 3000,
        :environment => (ENV['RAILS_ENV'] || "development").dup,
        :daemonize => false,
        :debugger => false,
        :pid => File.expand_path("tmp/pids/server.pid"),
        :config => File.expand_path("config.ru") # config.ru被指定，这也是commands.rb中server要chdir项目根目录的原因。
      })
end
[/cc]

<p>第二是require APP_PATH（也就是application.rb），其实就是将项目的application给配置好，里面有这么一句：</p>
[cc lang="ruby"]
require 'rails/all'
[/cc]
其实就是将rails所有的模块都引入进来，all.rb如下：
[cc lang="ruby"]
require "rails"
 
  %w(
    active_record
    action_controller
    action_mailer
    active_resource
    rails/test_unit
  ).each do |framework|
    begin
      require "#{framework}/railtie"
    rescue LoadError
    end
  end
[/cc]

<p>第三是调用了server#start方法，在Rails::Server中：</p>
[cc lang="ruby"]
def start
      puts "=> Booting #{ActiveSupport::Inflector.demodulize(server)}"
      puts "=> Rails #{Rails.version} application starting in #{Rails.env} on http://#{options[:Host]}:#{options[:Port]}"
      puts "=> Call with -d to detach" unless options[:daemonize]
      trap(:INT) { exit }
      puts "=> Ctrl-C to shutdown server" unless options[:daemonize]

      #Create required tmp directories if not found
      %w(cache pids sessions sockets).each do |dir_to_make|
        FileUtils.mkdir_p(Rails.root.join('tmp', dir_to_make))
      end

      super
    ensure
      # The '-h' option calls exit before @options is set.
      # If we call 'options' with it unset, we get double help banners.
      puts 'Exiting' unless @options && options[:daemonize]
    end
[/cc]
<p>多熟悉啊，先一步步的屏显。然后是trap(:INT) { exit }，是响应Ctrl-C中断的。再创建了tmp文件夹和四个子文件夹，最后回到Rack::Server的start方法中。</p>
<p>Rack::Server的start方法有这么一句：</p>
[cc lang="ruby"]
wrapped_app
[/cc]
实际调用的是：
[cc lang="ruby"]
def wrapped_app
    @wrapped_app ||= build_app app
end
[/cc]
这里有两个方法的调用，一个是#build_app，另一个是#app，先来看#app方法：
[cc lang="ruby"]
def app
      @app ||= begin
        if !::File.exist? options[:config]
          abort "configuration #{options[:config]} not found"
        end

        app, options = Rack::Builder.parse_file(self.options[:config], opt_parser)
        self.options.merge! options
        app
      end
end
[/cc]
<p>了然了，原来通过Rack::Builder和config.ru构建了一个Rack application啊.<a href="https://github.com/rack/rack/blob/master/lib/rack/builder.rb">Rack::Builder源码</a></p>
<p>再来看#build_app方法：</p>
[cc lang="ruby"]
def build_app(app)
  middleware[options[:environment]].reverse_each do |middleware|
    middleware = middleware.call(self) if middleware.respond_to?(:call)
    next unless middleware
    klass = middleware.shift
    app = klass.new(app, *middleware)
  end
  app
end
[/cc]
<p>通过middleware来新建一个app，像剥洋葱一样，一个一个middleware的往外套。</p>
<p>ok，由上面我们知道，通过config.ru，我们创建了一个Rack Application，下面来看看config.ru</p>
[cc lang="ruby"]
# This file is used by Rack-based servers to start the application.

require ::File.expand_path('../config/environment',  __FILE__)
run example::Application
[/cc]
<p>可以看到引入了environment.rb文件。如下：</p>
[cc lang="ruby"]
# Load the rails application
require File.expand_path('../application', __FILE__)

# Initialize the rails application
example::Application.initialize!
[/cc]
<p>初始化了example::Application，example::Application是继承的Rails::Application，那么Rails::Application是什么呢？</p>

<blockquote>  
  #Rails::Application is responsible for executing all railties, engines and plugin
  # initializers. Besides, it also executed some bootstrap initializers (check
  # Rails::Application::Bootstrap) and finishing initializers, after all the others
  # are executed (check Rails::Application::Finisher).</blockquote>
<p>通过<a href="https://github.com/rails/rails/blob/master/railties/lib/rails/application.rb">代码</a>，Rails::Application继承了Engine。</p>
<p>看看initialize!方法：</p>
[cc lang="ruby"]
def initialize!
  raise "Application has been already initialized." if @initialized
  run_initializers(self)
  @initialized = true
  self
end
[/cc]

<p><strong>至此，Rails Application的初始化和Rails Server基本上都已经启动完成。</strong></p>

3）<strong>rails是如何响应一个请求的?
占座，等下一篇文章完成后链接到这里。</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date>2011-02-13 03:25:31</wp:post_date>
		<wp:post_date_gmt>2011-02-12 19:25:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails3-%e5%88%9d%e5%a7%8b%e5%8c%96%e5%92%8c%e5%90%af%e5%8a%a8-initialization-process</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298088537]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[247838809]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>how rails3&#039;s action respond to the request</title>
		<link>http://zires.info/?p=400</link>
		<pubDate>Sat, 12 Feb 2011 19:29:42 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[ActionDispatch]]></category>

		<category domain="tag" nicename="actiondispatch"><![CDATA[ActionDispatch]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=400</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date>2011-02-13 03:29:42</wp:post_date>
		<wp:post_date_gmt>2011-02-12 19:29:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-rails3s-action-respond-to-the-request</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1297538983]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>git merge vs rebase vs cherry-pick</title>
		<link>http://zires.info/2011/02/13/git-merge-vs-rebase-vs-cherry-pick/</link>
		<pubDate>Sun, 13 Feb 2011 06:07:23 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[git]]></category>

		<category domain="category" nicename="git"><![CDATA[git]]></category>

		<category domain="tag"><![CDATA[git cherry-pick]]></category>

		<category domain="tag" nicename="git-cherry-pick"><![CDATA[git cherry-pick]]></category>

		<category domain="tag"><![CDATA[git merge]]></category>

		<category domain="tag" nicename="git-merge"><![CDATA[git merge]]></category>

		<category domain="tag"><![CDATA[git rebase]]></category>

		<category domain="tag" nicename="git-rebase"><![CDATA[git rebase]]></category>

		<guid isPermaLink="false">http://zires.info/?p=184</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>git merge</strong>是用来合并两个分支的。
[cc]
# 将b分支合并到当前分支
git merge b
[/cc]
<strong>git cherry-pick</strong>可以选择某一个分支中的一个或几个commit(s)来进行操作。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。
[cc]
# 先在v3.0中查看要合并的commit的commit id
git log
# 假设是 commit f79b0b1ffe445cab6e531260743fa4e08fb4048b

# 切到v2.0中
git check v2.0

# 合并commit
git cherry-pick f79b0b1ffe445cab6e531260743fa4e08fb4048b
[/cc]
<strong>git rebase</strong>有点类似git merge，但是两者又有不同，打个比方，你有两个抽屉A和B，里面都装了衣服，现在想把B中的衣服放到A中，git merge是那种横冲直撞型的，拿起B就倒入A里面，如果满了（冲突）再一并整理；而git rebase就很持家了，它会一件一件的从B往A中加，会根据一开始放入的时间顺序的来加，如果满了你可以处理这一件，你可以继续加，或者跳过这一件，又或者不加了，把A还原。所以merge适合那种比较琐碎的，简单的合并，系统级的合并还是用rebase吧。
<p>专业的区别请移步到这里<a href="http://progit.org/book/zh/ch3-6.html">合并和衍合</a></p>
[cc]
# 合并b
git rebase b

# 处理完冲突继续合并
git rebase --continue

# 跳过
git rebase --skip

# 取消合并
git rebase --abort

[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date>2011-02-13 14:07:23</wp:post_date>
		<wp:post_date_gmt>2011-02-13 06:07:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-merge-vs-rebase-vs-cherry-pick</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1297586341]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[245142595]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails tinymce insert(import) excel using paperclip and roo</title>
		<link>http://zires.info/2011/02/14/rails-tinymce-insertimport-excel-using-paperclip-and-roo/</link>
		<pubDate>Mon, 14 Feb 2011 00:47:35 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[excel]]></category>

		<category domain="tag" nicename="excel"><![CDATA[excel]]></category>

		<category domain="tag"><![CDATA[paperclip]]></category>

		<category domain="tag" nicename="paperclip"><![CDATA[paperclip]]></category>

		<category domain="tag"><![CDATA[Roo]]></category>

		<category domain="tag" nicename="roo"><![CDATA[Roo]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[tinymce]]></category>

		<category domain="tag" nicename="tinymce"><![CDATA[tinymce]]></category>

		<guid isPermaLink="false">http://zires.info/?p=413</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>给tinymce增加插入excel的功能。</blockquote>

用到的插件有：
[cc]
paperclip  => 用来做excel的上传
roo => 用来做excel的读取
jquery.form.js => ajax 表单提交
[/cc]

Roo 的安装<span style="color:#ff0000;">注意</span>：
Roo 的包依赖做的不是很好，它的几个依赖包需要指定lib才可以。如果你是rails3.0以下的使用者，在environment.rb中添加以下几行：（rails3同理，只不过加在Gemfile中）
[cc lang="ruby"]
config.gem 'libxml-ruby', :lib => 'libxml_ruby'
config.gem 'rubyzip', :version => '>= 0.9.4', :lib => 'zip/zip'
config.gem 'spreadsheet', :version => '>= 0.6.4.1'
config.gem 'google-spreadsheet-ruby', :source => "http://gemcutter.org", :lib => 'google_spreadsheet'
config.gem 'roo', :version => '>= 1.3.11'
[/cc]

<p><strong>第一步，新建tiny_mce插件spreadsheet，文件夹结构如下：</strong></p>
[cc]
| spreadsheet
  | img #=>  显示在tiny_mce工具栏上的小图标
  | js #=> 用到的js文件
  | langs #=> 多语言
  editor_plugin.js
  editor_plugin_src.js
  spreadsheet.html #=> 弹出的页面
[/cc]
<p>editor_plugin_src源代码：</p>
[cc lang="js"]
(function(tinymce){
    tinymce.create('tinymce.plugins.SpreadsheetPlugin', {
        init: function(ed, url){
       
            ed.addCommand('mceSpread', function(){
                ed.windowManager.open({
                    file: url + '/spreadsheet.htm',
                    width: 800,
                    height: 400,
                    inline: 1
                }, {
                    plugin_url: url
                });
            });
           
            // Register buttons
            ed.addButton('spreadsheet', {
                title: '插入excel表格',
                        cmd: 'mceSpread',
                        image: url + '/img/excel.jpg'
            });
        },
    });
   
    // Register plugin
    tinymce.PluginManager.add('spreadsheet', tinymce.plugins.SpreadsheetPlugin);
})(tinymce);
[/cc]

<p>spreadsheet.html页面源代码：</p>
[cc lang="html"]
< !DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Import Excel</title>
        <script type="text/javascript" src="../../tiny_mce_popup.js">
        </script>
        <script type="text/javascript" src="js/spreadsheet.js">
        </script>
        <script type="text/javascript" src="js/jquery-1.4.2.min.js">
        </script>
        <script type="text/javascript" src="js/jquery.form.js">
        </script>
        <script type="text/javascript">
            jQuery(function($){
                $.ajax({
                    url: "/sheets/uploader",
                    cache: false,
                    success: function(html){
                        $("#spreadsheet").append(html);
                    }
                });
            });
        </script>
        <style type='text/css'>
            a, li {
                list-style-type: none;
                text-decoration: none;
            }
           
            .clear {
                clear: both;
            }
           
            #spreadsheet{
                margin: 0 auto;
                overflow:hidden;
                width:280px;
            }
            #sheet_row, #sheet_column{
                width: 80px;
            }
        </style>
    </head>
    <body>
        <div class="mceActionPanel">
            <div id='spreadsheet'>
            </div>
        </div>
    </body>
</html>
[/cc]
<p>最后记得在tiny_mce使用的时候加上spreadsheet插件和spreadsheet的按钮就可以了。</p>
[cc lang="ruby"]
uses_tiny_mce :options => {
        :theme_advanced_buttons2 => %w{spreadsheet},
        :plugins => %w{spreadsheet}
      }
[/cc]
<p style="color:#0000ff;">OK，现在如果点击插入excel表格按钮，就会找到/sheets/uploader路由，弹出对应的页面。</p>

<p><strong>第二步完成sheet的上传和处理</strong>。</p>
[cc lang="ruby"]
require 'roo'
class Sheet < ActiveRecord::Base
  has_attached_file :avatar, :path => ":rails_root/tmp/assets/:id/:style/:basename.:extension"
 
  def file_content
    case suffix
      when '.ods'
      handle_exception { Openoffice.new(avatar.path) }
      when '.xls'
      handle_exception { Excel.new(avatar.path) }
      when '.xlsx'
      handle_exception { Excelx.new(avatar.path) }
    else
      return false
    end
  end
 
  def handle_exception(&block)
    begin
      yield
    rescue
      self.errors.add('avatar_content_type',I18n.translate('wrong_type'))
      self.destroy
      return false
    end
  end
 
  def sheet_name(index)
    file_content.sheets[index] unless file_content
  end
 
  def suffix
    File.extname(self.avatar_file_name)  
  end
 
  protected
  def validate_on_create
    support_file = [".ods",".xls",".xlsx"]
    errors.add('avatar_content_type',I18n.translate('wrong_type')) unless support_file.include?(suffix)
  end
 
  def before_destroy
    self.avatar = nil if !avatar.dirty?
  end
end
[/cc]
<p>sheets_controller源代码：</p>
[cc lang="ruby"]
require 'roo'
class SheetsController < ApplicationController
  layout nil
  after_filter :delete_attachments, :only => :add_sheet
 
  def show
    @sheet = Sheet.find(params[:id])
  end
 
  def uploader
    @sheet = Sheet.new
  end
 
  def create
    @sheet = Sheet.new(params[:sheet])
    if @sheet.save
      render :action => 'show'
    else
      flash.now[:error] = t('wrong_type')
      render :action => 'uploader'
    end
  end
 
  def add_sheet
    @sheet = Sheet.find(params[:id])
    @params = params[:sheet]
    render :partial => "add_sheet", :status => 200
  end
 
  protected
  def delete_attachments
    @sheet.destroy
  end
end
[/cc]
基本就是这样。

<strong>第三步，剩下的就是一些views，可以通过roo进行一些spreadsheet的数据处理。就不写了。</strong>
<p style="color:#ff0000;">需要注意的是，这里Roo处理excel时，不能很好的处理excel表格的样式（估计只有在windows平台上调用excel组件才可以处理样式），所以这里只是简单的导入数据，如果需要连同样式原封不动的导入，需要再做许多其他的处理。</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>413</wp:post_id>
		<wp:post_date>2011-02-14 08:47:35</wp:post_date>
		<wp:post_date_gmt>2011-02-14 00:47:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails-tinymce-insertimport-excel-using-paperclip-and-roo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[251990785]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1297644554]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>zires</title>
		<link>http://zires.info/about/wik8kynuw_1248112620/</link>
		<pubDate>Sat, 19 Feb 2011 04:01:20 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/wp-content/uploads/2010/11/wIk8KyNUw_1248112620.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Hitchcock]]></excerpt:encoded>
		<wp:post_id>445</wp:post_id>
		<wp:post_date>2011-02-19 12:01:20</wp:post_date>
		<wp:post_date_gmt>2011-02-19 04:01:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wik8kynuw_1248112620</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://zires.info/wp-content/uploads/2010/11/wIk8KyNUw_1248112620.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2010/11/wIk8KyNUw_1248112620.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"408";s:6:"height";s:3:"408";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:32:"2010/11/wIk8KyNUw_1248112620.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"wIk8KyNUw_1248112620-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"wIk8KyNUw_1248112620-300x300.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[zires]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>aukudu</title>
		<link>http://zires.info/about/logo/</link>
		<pubDate>Mon, 21 Feb 2011 13:05:20 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/wp-content/uploads/2010/11/LOGO.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[aukudu]]></content:encoded>
		<excerpt:encoded><![CDATA[Aukudu]]></excerpt:encoded>
		<wp:post_id>457</wp:post_id>
		<wp:post_date>2011-02-21 21:05:20</wp:post_date>
		<wp:post_date_gmt>2011-02-21 13:05:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>logo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://zires.info/wp-content/uploads/2010/11/LOGO.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2010/11/LOGO.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"153";s:6:"height";s:2:"50";s:14:"hwstring_small";s:23:"height='41' width='128'";s:4:"file";s:16:"2010/11/LOGO.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:15:"LOGO-150x50.jpg";s:5:"width";s:3:"150";s:6:"height";s:2:"50";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[aukudu]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rack rails3</title>
		<link>http://zires.info/2011/02/21/rack-rails3/</link>
		<pubDate>Mon, 21 Feb 2011 14:34:16 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[rack]]></category>

		<category domain="tag" nicename="rack"><![CDATA[rack]]></category>

		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=357</guid>
		<description></description>
		<content:encoded><![CDATA[简单提下rack
<p>1）要求</p>
一个rack应用程序要满足三个条件，a）响应call方法，b）call方法要有一个env环境参数，c）方法返回一个数组，数组包括三个部分，状态码，header和body
<p>2）简单的rack</p>
[cc lang="ruby"]
require 'rubygems'
require 'rack'

Rack::Handler::WEBrick.run lambda{ |env| [200,{},["hello rack!"]]}, :Port => 3000
[/cc]
<p>3）使用中间件</p>
Rack的中间件会一层层的封装rack应用程序，Rack中间件也是一个rack应用程序，新建一个最简单的中间件：
[cc lang="ruby"]
class SomeMiddleware
  def initialize(app)
    @app = app
  end

  def call(env)
    # 对@app做处理最后再返回一个符合rack标准的数组
    [status, headers, body]
  end
end

# 使用
Rack::Handler::WEBrick.run SomeMiddleware.new(app), :Port => 3000
[/cc]
<p>4）使用Rack::Builder</p>
Rack::Builder是rack的DSL，以更优雅的方式来打造一个rack应用程序。
[cc lang="ruby"]
app = Rack::Builder.new {
  use Rack::ContentLength
  use SomeMiddleware
  run SomeRackApp.new
}
# 或者直接用lambad
app = Rack::Builder.app do
  use Rack::ContentLength
  use SomeMiddleware
  lambda { |env| [200, {'Content-Type' => 'text/plain'}, 'OK'] }
end

# 使用
Rack::Handler::WEBrick.run app, :Port => 3000
[/cc]
<p>5）使用rackup和config.ru</p>
rackup让我们可以使用一个配置文件来运行Rack应用程序。
[cc lang="ruby"]
rackup -s thin -p 3000 [config.ru]
[/cc]
config.ru的内容就和Rack::Builder差不多了。
[cc lang="ruby"]
use Rack::ContentLength
use SomeMiddleware
lambda { |env| [200, {'Content-Type' => 'text/plain'}, 'OK'] }
[/cc]
Rackup的实现其实就是Rack::Server.start，start方法最重要的一句：
[cc lang="ruby"]
app, options = Rack::Builder.parse_file(self.options[:config], opt_parser)
[/cc]
还是Rack::Builder吧，一目了然。

<blockquote><p><strong>Rails3 on Rack</strong></p></blockquote>
如果看过rails的启动过程，我们知道，rails server 其实是调用了Rails::Server.new#start方法，也就是Rack::Server的start方法。也就是用Rack::Builder读取了config.ru文件，把整个Rails Application跑了起来。
[cc lang="ruby"]
MyOwnApp::Application.initialize!
run MyOwnApp::Application
[/cc]
<p>这里有个继承关系要知道：</p>
[cc]
MyOwnApp::Application < Rails::Application < Rails::Engine < Rails::Railtie
[/cc]
<p>整个rails3程序可以说是一个大的rack应用程序，里面每个中间件又都是一个rack应用程序，到每一个action又是一个rack应用程序，所以rails3和rack是密不可分的。
<p>可以用rack middleware看看一共使用了多少middleware</p>
[cc]
use ActionDispatch::Static
use Rack::Lock
use ActiveSupport::Cache::Strategy::LocalCache
use Rack::Runtime
use Rails::Rack::Logger
use ActionDispatch::ShowExceptions
use ActionDispatch::RemoteIp
use Rack::Sendfile
use ActionDispatch::Callbacks
use ActiveRecord::ConnectionAdapters::ConnectionManagement
use ActiveRecord::QueryCache
use ActionDispatch::Cookies
use ActionDispatch::Session::CookieStore
use ActionDispatch::Flash
use ActionDispatch::ParamsParser
use Rack::MethodOverride
use ActionDispatch::Head
use ActionDispatch::BestStandardsSupport
use Warden::Manager
use Sass::Plugin::Rack
run MyOwnApp::Application.routes

[/cc]

这里有篇railscasts讲如何将Sinatra和Rails结合起来，理论上任何符合Rack规则的框架都可以和Rails结合。<a href="http://railscasts.com/episodes/222-rack-in-rails-3">rack-in-rails-3</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>357</wp:post_id>
		<wp:post_date>2011-02-21 22:34:16</wp:post_date>
		<wp:post_date_gmt>2011-02-21 14:34:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rack-rails3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298298858]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[245499780]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>learn erlang 备忘</title>
		<link>http://zires.info/2011/02/22/learn-erlang-%e5%a4%87%e5%bf%98/</link>
		<pubDate>Tue, 22 Feb 2011 14:27:59 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[erlang]]></category>

		<category domain="category" nicename="erlang"><![CDATA[erlang]]></category>

		<category domain="tag"><![CDATA[备忘]]></category>

		<category domain="tag" nicename="%e5%a4%87%e5%bf%98"><![CDATA[备忘]]></category>

		<guid isPermaLink="false">http://zires.info/?p=465</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><strong><p>基本语法和数据类型</p></strong></blockquote>
1）使用`.`作为一段代码的结束，例如：
[cc lang="erlang"]
2+5.
%>7
[/cc]

2）变量，以大写字母开头，并且只许"匹配"一次，例如：
[cc lang="erlang"]
Z = 1.
%>1
Z = 2.
%>** exception error: no match of right hand side value 2
[/cc]

3）Atoms（原子），是Erlang中的一种数据类型，以小写字母开头，或者以大写字母开头，但有类似引号的闭合符号包裹着。Atoms就是个简单的名字，不能有值，例如：
[cc lang="erlang"] 
zires = 8.
%> ** exception error: no match of right hand side value 8
'ZIRES'
%>'ZIRES'
[/cc]

4）fun（匿名函数），可以有可选条件when，例如：
[cc lang="erlang"]
f = fun (X) -> X+1 end.
%#Fun<erl_eval .6.13229925>
f(2).
%>3

Fun2 = fun (X) when X>=5 -> gt; (X) -> lt end.
Fun2(7).
%>gt

[/cc]
调用函数还有如下形式，
[cc]
fun Name/Arity
fun Module:Name/Arity

#其中Name是函数名，原子类型，Arity是整数类型，表示参数个数
[/cc]
例如，
[cc lang="erlang"]
fun lists:append/2([1,2], [3,4])
%> [1,2,3,4]
[/cc]

5）Number，有integer和float两种数据类型。$char 返回char的ASCII值
[cc]
base#value
Integer with the base base, which must be an integer in the range 2..36.
In Erlang 5.2/OTP R9B and earlier versions, the allowed range is 2..16.

#base#value表示比特位，二进制
2#101. 就是2的平方*1+2的一次方*0+2的零次方*1
[/cc]
例子：
[cc lang="erlang"]
$A.
%>65

2#101.
%>5

2.3e-3.
%>0.0023

65.
%>65
[/cc]</erl_eval>

6）复合数据类型Tuple，Tuple中每一个称为元素（element），官方的例子：
[cc lang="erlang"]
P = {adam,24,{july,29}}.
%>{adam,24,{july,29}}

element(1,P).
%>adam

element(3,P).
%>{july,29}

P2 = setelement(2,P,25).
%>{adam,25,{july,29}}

tuple_size(P).
%>3

tuple_size({}).
%>0

%反过来不行
{a,b} = {X,b}.
%>* 1: variable 'X' is unbound
[/cc]

7）复合数据类型List，List中每一个也称为元素（element），一个List[H|T]有Head（头）和Tail（尾），官方的例子：
[cc lang="erlang"]
L1 = [a,2,{c,4}].
%>[a,2,{c,4}]

[H|T] = L1.
%>[a,2,{c,4}]

H.
%>a

T.
%>[2,{c,4}]

L2 = [d|T].
%>[d,2,{c,4}]

length(L1).
%>3
length([]).
%>0
[/cc]

7）严格上说，在erlang中并没有string类型，string其实是代表字符串的数字的数组，string只能由双引号包起来，例子：
[cc lang="erlang"]
[83,117,114,112,114,105,115,101].
%>"Surprise"

"erlang""good"
%>"erlanggood"

[/cc]
<blockquote><strong><p>模式匹配</p></strong></blockquote>
erlang中的等号不是赋值操作符，而是表示模式匹配，左边匹配右边，变量进行绑定，例子：
[cc lang="erlang"]
{X,abc} = {"lala",abc}.
X.
%>"lala"

{X,Y} {333,ghi,"cat"}.
%>匹配失败，身形不一样

[H|T] = "cat".
H.
%>99
T.
%>"at"

[/cc]
<p>"_"可以在模式匹配中作为占位符使用</p>
[cc lang="erlang"]

{_,_,C} = {1,2,3}.
C.
%>3
[/cc]

<p>f()可以用来取消之前的绑定，重新给变量绑定新的值。</p>
[cc lang="erlang"]
X = 1.
f().
X = 2.
%>2
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date>2011-02-22 22:27:59</wp:post_date>
		<wp:post_date_gmt>2011-02-22 14:27:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>learn-erlang-%e5%a4%87%e5%bf%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298883471]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[246628067]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>aukudu</title>
		<link>http://zires.info/about/logo3/</link>
		<pubDate>Wed, 23 Feb 2011 12:32:50 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/wp-content/uploads/2010/11/logo3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Aukudu]]></excerpt:encoded>
		<wp:post_id>481</wp:post_id>
		<wp:post_date>2011-02-23 20:32:50</wp:post_date>
		<wp:post_date_gmt>2011-02-23 12:32:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>logo3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://zires.info/wp-content/uploads/2010/11/logo3.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"223";s:6:"height";s:2:"80";s:14:"hwstring_small";s:23:"height='45' width='128'";s:4:"file";s:17:"2010/11/logo3.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:16:"logo3-150x80.png";s:5:"width";s:3:"150";s:6:"height";s:2:"80";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2010/11/logo3.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Aukudu]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ruby1.9 hash</title>
		<link>http://zires.info/2011/02/27/ruby1-9-hash/</link>
		<pubDate>Sun, 27 Feb 2011 05:19:25 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[hash]]></category>

		<category domain="tag" nicename="hash"><![CDATA[hash]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[ruby1.9]]></category>

		<category domain="tag" nicename="ruby1-9"><![CDATA[ruby1.9]]></category>

		<guid isPermaLink="false">http://zires.info/?p=277</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Hash有序</strong>
Ruby1.8：
[cc lang="ruby"]
ruby-1.8.7-p299 > h = {}
 => {} 
ruby-1.8.7-p299 > h[1] = 1
 => 1 
ruby-1.8.7-p299 > h
 => {1=>1} 
ruby-1.8.7-p299 > h[0] = 1
 => 1 
ruby-1.8.7-p299 > h
 => {0=>1, 1=>1} 
[/cc]
Ruby1.9
[cc lang="ruby"]
irb(main):001:0> RUBY_VERSION
=> "1.9.3"
irb(main):002:0> h = {}
=> {}
irb(main):003:0> h[1] = 1
=> 1
irb(main):004:0> h[0] = 0
=> 0
irb(main):005:0> h
=> {1=>1, 0=>0}
irb(main):006:0> 
[/cc]

<p><strong>类似json的写法：</strong></p>
ruby1.8不支持
ruby1.9：
[cc lang="ruby"]
irb(main):001:0> RUBY_VERSION
=> "1.9.3"
irb(main):002:0> {a: 1}
=> {:a=>1}
irb(main):003:0> {a_b: 1}
=> {:a_b=>1}
irb(main):004:0> {a-b: 1}
SyntaxError: (irb):3: syntax error, unexpected tLABEL
irb(main):005:0> {"a": 1}
SyntaxError: (irb):4: syntax error, unexpected ':', expecting tASSOC

[/cc]

<blockquote>参考链接</blockquote>

<a href="http://www.igvita.com/2009/02/04/ruby-19-internals-ordered-hash/">ruby-19-internals-ordered-hash/</a>
<a href="http://www.oreillynet.com/ruby/blog/2007/06/on_the_horizon_ten_things_i_li.html">on_the_horizon_ten_things_i_li.html</a>
<a href="http://stackoverflow.com/questions/2134702/ruby-1-9-hash-with-a-dash-in-a-key">ruby-1-9-hash-with-a-dash-in-a-key</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>277</wp:post_id>
		<wp:post_date>2011-02-27 13:19:25</wp:post_date>
		<wp:post_date_gmt>2011-02-27 05:19:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby1-9-hash</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298783967]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[253981273]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Arithmetic Operators</title>
		<link>http://zires.info/2011/02/28/erlang-operator-%e5%a4%87%e5%bf%98/arithmetic-operators/</link>
		<pubDate>Sun, 27 Feb 2011 14:15:52 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/wp-content/uploads/2011/02/Arithmetic-Operators.png</guid>
		<description></description>
		<content:encoded><![CDATA[Arithmetic Operators]]></content:encoded>
		<excerpt:encoded><![CDATA[Arithmetic Operators]]></excerpt:encoded>
		<wp:post_id>491</wp:post_id>
		<wp:post_date>2011-02-27 22:15:52</wp:post_date>
		<wp:post_date_gmt>2011-02-27 14:15:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>arithmetic-operators</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>490</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://zires.info/wp-content/uploads/2011/02/Arithmetic-Operators.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2011/02/Arithmetic-Operators.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"417";s:6:"height";s:3:"394";s:14:"hwstring_small";s:23:"height='96' width='101'";s:4:"file";s:32:"2011/02/Arithmetic-Operators.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"Arithmetic-Operators-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"Arithmetic-Operators-300x283.png";s:5:"width";s:3:"300";s:6:"height";s:3:"283";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Arithmetic Operators]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Comparison Operators</title>
		<link>http://zires.info/2011/02/28/erlang-operator-%e5%a4%87%e5%bf%98/ecr02-05/</link>
		<pubDate>Mon, 28 Feb 2011 04:03:31 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/wp-content/uploads/2011/02/ecr02-05.png</guid>
		<description></description>
		<content:encoded><![CDATA[Comparison Operators]]></content:encoded>
		<excerpt:encoded><![CDATA[Comparison Operators]]></excerpt:encoded>
		<wp:post_id>498</wp:post_id>
		<wp:post_date>2011-02-28 12:03:31</wp:post_date>
		<wp:post_date_gmt>2011-02-28 04:03:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ecr02-05</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>490</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://zires.info/wp-content/uploads/2011/02/ecr02-05.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2011/02/ecr02-05.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"207";s:6:"height";s:3:"232";s:14:"hwstring_small";s:22:"height='96' width='85'";s:4:"file";s:20:"2011/02/ecr02-05.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"ecr02-05-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Comparison Operators]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>erlang operator 备忘</title>
		<link>http://zires.info/2011/02/28/erlang-operator-%e5%a4%87%e5%bf%98/</link>
		<pubDate>Mon, 28 Feb 2011 04:12:00 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[erlang]]></category>

		<category domain="category" nicename="erlang"><![CDATA[erlang]]></category>

		<category domain="tag"><![CDATA[备忘]]></category>

		<category domain="tag" nicename="%e5%a4%87%e5%bf%98"><![CDATA[备忘]]></category>

		<guid isPermaLink="false">http://zires.info/?p=490</guid>
		<description></description>
		<content:encoded><![CDATA[erlang中的运算符
<strong>1）算术运算符</strong>
[caption id="attachment_491" align="alignnone" width="150" caption="Arithmetic Operators"]<a href="http://zires.info/wp-content/uploads/2011/02/Arithmetic-Operators.png"><img src="http://zires.info/wp-content/uploads/2011/02/Arithmetic-Operators-150x150.png" alt="Arithmetic Operators" title="Arithmetic Operators" width="150" height="150" class="size-thumbnail wp-image-491" /></a>[/caption]
[cc lang="erlang"]
1> +1.
1
2> -1.
-1
3> 1+1.
2
4> 2/2.
1.0
5> 5 div 3.
1
6> 5 rem 3.
2
[/cc]
<p>band是按位与运算，bor是按位或运算，bxor是按位异或，bsl按位左移，bsr按位右移，注意最后的结果都是二进制。</p>
[cc lang="erlang"]
1> 2#10 band 2#110.
2
2> 3#10 bor 2#100.
7 %这里3#10先换算成了2#11
3> 2#10 bxor 2#11.
1
4> 2#10 bsl 2.
8
5> 2#10 bsr 2.
0
[/cc]

<strong>2）比较运算符</strong>
[caption id="attachment_498" align="alignnone" width="150" caption="Comparison Operators"]<a href="http://zires.info/wp-content/uploads/2011/02/ecr02-05.png"><img src="http://zires.info/wp-content/uploads/2011/02/ecr02-05-150x150.png" alt="Comparison Operators" title="Comparison Operators" width="150" height="150" class="size-thumbnail wp-image-498" /></a>[/caption]
<p>data type的大小排序：</p>
[cc]
number < atom < reference < fun < port < pid < tuple < list < bit string
[/cc]
=:=和==，/=和=/=的区别：
[cc lang="erlang"]
1> 1 == 1.0.
true
2> 1=:=1.0.
false
3> 1 /= 1.0.
false
4> 1 =/= 1.0.
true
[/cc]

<strong>3）逻辑运算符</strong>
四个，not，and，or，xor
[cc lang="erlang"]
1> not true.
false
2> true and false.
false
3> true xor false.
true
4> true or garbage.
** exception error: bad argument
[/cc]

<strong>4）数组运算</strong>
最后还有个数组运算，++或者--，很简单
[cc lang="erlang"]
1> [1,2] ++ [3,4].
[1,2,3,4]
2> [1,2] -- [3,4].
[1,2]
3> [1,2] -- [1,4].
[2]
4> [1,2] ++ [1,4].
[1,2,1,4]
5> [1,2] -- [1,2].
[]
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>490</wp:post_id>
		<wp:post_date>2011-02-28 12:12:00</wp:post_date>
		<wp:post_date_gmt>2011-02-28 04:12:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>erlang-operator-%e5%a4%87%e5%bf%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298866322]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[245792556]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>difference div section article</title>
		<link>http://zires.info/2011/03/13/difference-div-section-article/</link>
		<pubDate>Sun, 13 Mar 2011 15:37:47 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[html5]]></category>

		<category domain="tag" nicename="html5"><![CDATA[html5]]></category>

		<category><![CDATA[HTML5&amp;CSS3]]></category>

		<category domain="category" nicename="html5css3"><![CDATA[HTML5&amp;CSS3]]></category>

		<guid isPermaLink="false">http://zires.info/?p=515</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>1）div，section，article 是什么？</strong>

div：块级元素，本身没有意义，如果加上class，或id，可以表示一段区域的含义，就是用来给文档划分区块，支持常见属性和事件。

section：
<blockquote>The section element represents a section of a document, typically with a title or heading.</blockquote>
块级元素，有意义，表示文档的一段区域，也是用来给文档划分区块，支持常见属性和事件。

article：
<blockquote>The article element represents a section of content that forms an independent part of a document or site; for example, a magazine or newspaper article, or a blog entry.</blockquote>
块级元素，有意义，表示文档内容的一段区域，用来给文档的内容划分区块，例如一篇博客或者一篇新闻，支持常见属性和事件。

<strong>2） div，section，article 区别</strong>

div：在写HTML的过程中，我们总是选择那些尽量贴切的标签来表示文档DOM，当实在没有合适的标签时，用无意义的div把内容划分组织起来。

section：section和div很像，最大的区别显而易见，section是有意义的，它的作用是把文档中有关联的一组内容划分出来。
section里面可以有的标签有，article，nav，aside，也可以是一段新的section（嵌套）。
section可以做为设计整个页面框架的布局标签。

article：和section一样，是有意义的标签，和section的主要区别是，每一个article都是独立存在的。可以试想这样一个情景，页面上有一个page group的"section"，里面的每一个page就可以作为一个"article"。

<strong>3）div，section，article 各自使用的场景</strong>
使用规则：

a）当文档中的一段内容是完整并且独立的，例如有自己的标题，内容，页脚标注，就可以用article标签包裹起来。
例如：
[cc lang="html"]
<article>
  <header>
    <h1>Title</h1>
  </header>
   <p>Content…</p>
  <footer>
    <p>.............</p>
  </footer>
</article>
[/cc]

b）当文档中的一段内容是彼此关联的，就可以用article标签包裹起来。
例如：
[cc lang="html"]
// 一组article
<section>
  <article>.......</article>
  <article>.......</article>
  ....
</section>
[/cc]
[cc]
<article>
	<h1>Title</h1>
        // title和content是有关联的，所以可以为一个section
        // 为什么不用article呢？
        // 因为如果用article的话就是父容器的article的子元素
        // 不符合article定义中独立的概念 
	<section>
		<h2>Section title</h2>
		<p>Content</p>
	</section>
	<section>
		<h2>Section title</h2>
		<p>Content</p>
	</section>
	<section>
		<h2>Section title</h2>
		<p>Content</p>
	</section>
</article>
[/cc]

c）当文档中的一段内容找不到合适意义的标签，就用div，也就是说，当我们发现不适合用section或者article时，用div吧。

<blockquote>参考链接 <a href="http://oli.jp/2009/html5-structure1/">html5-structure1</a></blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>515</wp:post_id>
		<wp:post_date>2011-03-13 23:37:47</wp:post_date>
		<wp:post_date_gmt>2011-03-13 15:37:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>difference-div-section-article</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1300030670]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[254436340]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>invalid multibyte char (US-ASCII) ruby1.9</title>
		<link>http://zires.info/2011/03/17/invalid-multibyte-char-us-ascii-ruby1-9/</link>
		<pubDate>Thu, 17 Mar 2011 14:50:40 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[issues]]></category>

		<category domain="tag" nicename="issues"><![CDATA[issues]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[ruby1.9]]></category>

		<category domain="tag" nicename="ruby1-9"><![CDATA[ruby1.9]]></category>

		<guid isPermaLink="false">http://zires.info/?p=543</guid>
		<description></description>
		<content:encoded><![CDATA[ruby1.9+rails3在helper方法中写中文时，出现invalid multibyte char (US-ASCII)异常了，查了下，原来ruby1.9是用ASCII编码来读源码的，奇怪。
解决办法是在文件的第一行加上
[cc]
# encoding: utf-8
[/cc]

rails3中确定application.rb中有：
[cc lang="ruby"]
# Configure the default encoding used in templates for Ruby 1.9.
config.encoding = "utf-8"
[/cc]

阅读下面的文章：

http://blog.grayproductions.net/articles/ruby_19s_three_default_encodings
http://blog.grayproductions.net/articles/understanding_m17n]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>543</wp:post_id>
		<wp:post_date>2011-03-17 22:50:40</wp:post_date>
		<wp:post_date_gmt>2011-03-17 14:50:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>invalid-multibyte-char-us-ascii-ruby1-9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_oembed_6077656b82aabc16dafd000e782ec639</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1302918270]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[256569926]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_a5fbb6f8bf423555535d6a045c419aeb</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>69</wp:comment_id>
		<wp:comment_author><![CDATA[via]]></wp:comment_author>
		<wp:comment_author_email>wschangda@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2011-03-22 08:28:00</wp:comment_date>
		<wp:comment_date_gmt>2011-03-22 08:28:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[我是在SciTE中写的Ruby（1.9.2）代码，字符串内容为中文时也出现这种状况。楼主能帮我解决一下吗？]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>70</wp:comment_id>
		<wp:comment_author><![CDATA[]]></wp:comment_author>
		<wp:comment_author_email>zshuaibin@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP></wp:comment_author_IP>
		<wp:comment_date>2011-03-24 08:11:00</wp:comment_date>
		<wp:comment_date_gmt>2011-03-24 08:11:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[就是在源文件的最上面一行加  # encoding: utf-8
你试下，有多个文件的话，每个文件都要加]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>69</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Learn Ruby Metaprogramming 备忘</title>
		<link>http://zires.info/2011/03/24/learn-ruby-metaprogramming/</link>
		<pubDate>Thu, 24 Mar 2011 14:31:36 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[Metaprogramming]]></category>

		<category domain="tag" nicename="metaprogramming"><![CDATA[Metaprogramming]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[备忘]]></category>

		<category domain="tag" nicename="%e5%a4%87%e5%bf%98"><![CDATA[备忘]]></category>

		<guid isPermaLink="false">http://zires.info/?p=424</guid>
		<description></description>
		<content:encoded><![CDATA[又见元编程，元编程是拿语言本身当做操作的对象。
元编程是Ruby的一种自省能力。

<strong>1）继承族谱</strong>
顶层的是BasicObject（ruby1.9新增）
[cc lang="ruby"]
ruby-1.9.2-rc2 > BasicObject.superclass
 => nil 
[/cc]
Object继承自BasicObject
[cc lang="ruby"]
ruby-1.9.2-rc2 > Object.superclass
 => BasicObject 
[/cc]
Module继承了Object
[cc lang="ruby"]
ruby-1.9.2-rc2 > Module.superclass
 => Object
[/cc]
Class继承了Module
[cc lang="ruby"]
ruby-1.9.2-rc2 > Class.superclass
 => Module 
[/cc]

注意观察：
[cc lang="ruby"]
Class.new.ancestors
 => [#class:0x000000022ef638, Object, Kernel, BasicObject] 
Class.ancestors
 => [Class, Module, Object, Kernel, BasicObject]
BasicObject.class
 => Class 
[/cc]

<strong>2）main</strong>
不管是java还是c，都有个main函数作为程序的入口，ruby的在哪呢？其实我们一直在用：
[cc lang="ruby"]
ruby-1.9.2-rc2 > self
 => main 
ruby-1.9.2-rc2 > self.class
 => Object 
[/cc]
我们写的代码其实都是在这个top-level对象main中发生的，一切都是对象，看吧，一点也不奇怪。

<strong>3）constants</strong>
[cc]
Module#const_get
Module#const_set
Module#remove_const
[/cc]
来看看ruby中的一般的常量（大写开头）：
[cc lang="ruby"]
irb(main):001:0> A = "1"
=> "1"
irb(main):002:0> self.class.const_get(:A)
=> "1"
[/cc]
我们定义一个类的时候，其实也无形中给class这个类增加了一个常量，例如：
[cc lang="ruby"]
irb(main):004:0> class Zires;end
=> nil
irb(main):005:0> Class.constants.grep("Zires")
=> ["Zires"]

irb(main):008:0> Class.constants - Object.constants
=> []
[/cc]
另外，constants在ruby中还扮演着类似文件路径的作用，例如：
[cc lang="ruby"]
module C
  File = "in C"
  class Doc
    File = "in c/doc"
    def root
      p File
      p ::C::File # 类似绝对路径，absolute path
    end
  end
end

irb(main):018:0> C::File
=> "in C"
irb(main):019:0> Doc::File
NameError: uninitialized constant Doc
	from (irb):19
	from :0
irb(main):020:0> C::Doc::File
=> "in c/doc"
irb(main):021:0> C::Doc.new.root
"in c/doc"
"in C"
=> nil
[/cc]

<strong>4） dynamic define code</strong>
[cc]
Class#new
Module#define_method
Module#remove_method
Module#method_defined?
[/cc]
看下面的例子：
[cc lang="ruby"]
oop = "Oops!"

class Oops
  def say
    p "I say #{oop}"
  end
end

Oops.new.say #=>undefined local variable or method `oop'

oops = Class.new do

  define_method :say do
    p "I say #{oop}"	
  end

end

oops.new.say # => "I say Oops!"
[/cc]

<strong>5） dynamic run code</strong>
[cc]
Object#send
Object#instance_eval
Module#module_eval
Module#class_eval
Kernel#eval

block
Proc
proc
lambda
method
[/cc]
send：
[cc lang="ruby"]
ruby-1.9.2-p180 > 1.send(:+, 2)
 => 3 
[/cc]

eval&binding：
[cc lang="ruby"]
ruby-1.9.2-p180 > eval("1+2")
 => 3 

ruby-1.9.2-p180 > x = 1
 => 1 
ruby-1.9.2-p180 > eval("x + 2")
 => 3 

def bind_x(x)
  x = x
  binding
end

ruby-1.9.2-p180 > eval("x + 2", bind_x(2))
 => 4 
[/cc]

instance_eval：
[cc lang="ruby"]
ruby-1.9.2-p180 > 1.instance_eval { self + 2}
 => 3 
[/cc]

class_eval：
[cc lang="ruby"]
1.class.class_eval do
  def add_2
    self + 2
  end
end

ruby-1.9.2-p180 > 1.add_2
 => 3 

[/cc]

ruby中有好几个'家伙'能响应call方法，与eval家族的区别是，他们具有延迟性：
[cc lang="ruby"]
#Proc Objects

z = Proc.new { |x| p "#{x}"}
z.call("a") # call的时候才执行
 #=> "a" 

l = lambda { |x| p "#{x}"}
l.call("b")
 #=> "b" 

p = proc { |x| p "#{x}"}
p.call("c")
 #=> "c"

def myself(x)
  p "#{x}"
end

 m = method(:myself).class
 #=> Method
 m.call("d")
# => "d" 
[/cc]

Proc vs proc vs lambda vs method 相同点：
[cc lang="ruby"]
#1）都响应call方法
#2）method可以转化为proc，其余都是Proc的对象
ruby-1.9.2-p180 > Proc.new{}.class
 => Proc 
ruby-1.9.2-p180 > lambda{}.class
 => Proc 
ruby-1.9.2-p180 > proc{}.class
 => Proc

ruby-1.9.2-p180 > method(:myself).to_proc.class
#=> Proc
[/cc]
***block其实也是Proc***

Proc vs proc vs lambda vs method 不同点：
[cc lang="ruby"]
#1）lambda 是Kernel方法，proc 也是Kernel方法，Proc是类，method是obj方法
#2）关于return，看例子比较
def check(callable)
  callable.call
  return "I AM Here!"
end

check lambda { return 10 }
# => "I AM Here!"

check Proc.new { return 10 }
# => LocalJumpError: unexpected return

check proc { return 10
# ruby1.8可能输出"I AM Here!"，ruby1.9把proc和Proc统一了
# proc其实就是Proc.new 
# => LocalJumpError: unexpected return

def myself ; return 10 ; end
check method(:myself)
# => "I AM Here!"

#3）关于参数
l = lambda { |x| p "#{x}"}
p = Proc.new { |x| p "#{x}"}
ruby-1.9.2-p180 > p.arity
# => 1 
ruby-1.9.2-p180 > l.arity
# => 1
 
ruby-1.9.2-p180 > p.call
# => ""

ruby-1.9.2-p180 > l.call
# => ArgumentError: wrong number of arguments (0 for 1)

#4）lambda? 方法

ruby-1.9.2-p180 > lambda {}.lambda?
 => true 
ruby-1.9.2-p180 > proc{}.lambda?
 => false 

#5）简便写法
# lamda1.9新增
ruby-1.9.2-p180 > ->(x){ p "#{x}"}.class
# => Proc

#6）method可以 unbind
#  看 UnboundMethod

[/cc]

<strong>6） callbacks </strong>
[cc]
method_missing
const_missing

included and extended
method_added and singleton_method_added
method_removed and method_undefined
singleton_method_removed and singleton_method_undefined
inherited
 
# 这些方法看文档吧，比较全
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>424</wp:post_id>
		<wp:post_date>2011-03-24 22:31:36</wp:post_date>
		<wp:post_date_gmt>2011-03-24 14:31:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>learn-ruby-metaprogramming</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1300977098]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[262038136]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ruby1.9 regexp match named captures</title>
		<link>http://zires.info/2011/03/31/ruby1-9-regexp-match-named-captures/</link>
		<pubDate>Thu, 31 Mar 2011 06:42:38 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[regexp]]></category>

		<category domain="tag" nicename="regexp"><![CDATA[regexp]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[ruby1.9]]></category>

		<category domain="tag" nicename="ruby1-9"><![CDATA[ruby1.9]]></category>

		<guid isPermaLink="false">http://zires.info/?p=557</guid>
		<description></description>
		<content:encoded><![CDATA[ruby中的捕获型括号：
[cc lang="ruby"]
str = "this is test data"
str =~ /(da)(ta)/

p $~
# => #(MatchData "data" 1:"da" 2:"ta")
p $~.to_a
# => ["data", "da", "ta"]
p $1
# => "da"
p $2
# => "ta"
[/cc]

ruby1.9终于加入了命名捕获，用来取代$1，$2这种可读性很差的方式。
[cc lang="ruby"]
p RUBY_VERSION
#=> "1.9.2"

str = "this is test data"
/(?<d>da)(?<t>ta)/ =~ str

p d
#=> "da"
p t
#=> "ta"

#***注意顺序***
str =~ /(?<ddd>da)(ta)/

p ddd
#=> undefined local variable or method `ddd' for main:Object
[/cc]</ddd></t></d>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>557</wp:post_id>
		<wp:post_date>2011-03-31 14:42:38</wp:post_date>
		<wp:post_date_gmt>2011-03-31 06:42:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby1-9-regexp-match-named-captures</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1301553758]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[267332023]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>zmap jquery plugin for google map v3</title>
		<link>http://zires.info/2011/04/07/zmap-jquery-plugin-for-google-map-v3/</link>
		<pubDate>Wed, 06 Apr 2011 16:16:51 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[google map]]></category>

		<category domain="tag" nicename="google-map"><![CDATA[google map]]></category>

		<category><![CDATA[jquery]]></category>

		<category domain="category" nicename="jquery"><![CDATA[jquery]]></category>

		<category domain="tag"><![CDATA[plugin]]></category>

		<category domain="tag" nicename="plugin"><![CDATA[plugin]]></category>

		<guid isPermaLink="false">http://zires.info/?p=579</guid>
		<description></description>
		<content:encoded><![CDATA[最近做一个和房产相关的项目，多次用到google map v3的应用，为了方便重复使用，便自己简单写了个jquery的插件。

<p>效果可以查看<a href="http://zires.github.com/zmap/example" target='_blank'>DEMO</a></p>
<p>github上<a href="https://github.com/zires/zmap">源代码</a></p>
<p><a href="http://zires.github.com/zmap/">下载地址</a></p>

<p><strong>使用也很方便</strong>：</p>
1）加载所需要的lib
[cc]
<script type="text/javascript" src="http://maps.google.com/maps/api/js?v=3.3&amp;sensor=false"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js" type="text/javascript"></script>

<script src="jquery.zmap.min.js" type="text/javascript"></script>
[/cc]

2）html这么写
[cc lang="html"]
<div id="map" lat="-34.397" lng="150.644">
  Info Window Content.这里面的会作为infowindow点击的内容
</div>
[/cc]

3）最后别忘了
[cc lang="javascript"]
$(document).ready(function(){
    $("#map").zmap();
});
[/cc]

<p><strong>一些options</strong>：</p>
[cc]
lat  
  ---指定lat
lng  
  ---指定lng
marker  
  ---默认是true，false的话就不显示marker，
    还可以传一个自定义的marker或者一个数组包括多个自定义的marker  
infowindow
  ---默认是true，false就不显示marker，
    同理可以传自定义的infowindow
address
  ---marker的title，默认是div里面的内容
infoContent
  ---infowindow点击后跳出的内容，默认是div里面的内容
before
  ---function(options){}回调函数
after
  ---function(map){}回调函数
[/cc]



对于快速创建带marker和infowindow的地图还是很快的，当然了，还可以传google map的参数进去，具体可以看google map的文档和上面的例子。：）
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>579</wp:post_id>
		<wp:post_date>2011-04-07 00:16:51</wp:post_date>
		<wp:post_date_gmt>2011-04-06 16:16:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zmap-jquery-plugin-for-google-map-v3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1302106854]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[272740731]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>no such file to load -- spec/rake/spectask</title>
		<link>http://zires.info/2011/04/27/no-such-file-to-load-spec-rake-spectask/</link>
		<pubDate>Tue, 26 Apr 2011 16:10:46 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[error]]></category>

		<category domain="tag" nicename="error"><![CDATA[error]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=603</guid>
		<description></description>
		<content:encoded><![CDATA[Note：'spec/rake/spectask' has removed in Rspec2.0
use 'rake/testtask' instead
[cc lang="ruby"]
require 'rake'
require 'rake/testtask'

desc 'Run all spec examples'
Rake::TestTask.new('spec') do |t|
   t.libs < < "lib"
   t.libs << "spec"
   t.pattern = 'spec/**/*_spec.rb'
   t.verbose = true
end

task :default => :spec
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>603</wp:post_id>
		<wp:post_date>2011-04-27 00:10:46</wp:post_date>
		<wp:post_date_gmt>2011-04-26 16:10:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>no-such-file-to-load-spec-rake-spectask</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[288915590]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1303834446]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[no-such-file-to-load-specrakespectask]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>xxx</title>
		<link>http://zires.info/?attachment_id=615</link>
		<pubDate>Fri, 13 May 2011 10:42:53 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/wp-content/uploads/2011/05/xxx.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>615</wp:post_id>
		<wp:post_date>2011-05-13 18:42:53</wp:post_date>
		<wp:post_date_gmt>2011-05-13 10:42:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xxx</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://zires.info/wp-content/uploads/2011/05/xxx.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2011/05/xxx.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"500";s:6:"height";s:3:"328";s:14:"hwstring_small";s:23:"height='83' width='128'";s:4:"file";s:15:"2011/05/xxx.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:15:"xxx-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:15:"xxx-300x196.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"196";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ExcitedScala_7</title>
		<link>http://zires.info/?attachment_id=616</link>
		<pubDate>Fri, 13 May 2011 10:43:49 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<guid isPermaLink="false">http://zires.info/wp-content/uploads/2011/05/ExcitedScala_7.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>616</wp:post_id>
		<wp:post_date>2011-05-13 18:43:49</wp:post_date>
		<wp:post_date_gmt>2011-05-13 10:43:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>excitedscala_7</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://zires.info/wp-content/uploads/2011/05/ExcitedScala_7.pdf</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2011/05/ExcitedScala_7.pdf]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[302670901]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>deployment capistrano unicorn nginx rails3</title>
		<link>http://zires.info/2011/06/02/deployment-capistrano-unicorn-nginx-rails3/</link>
		<pubDate>Wed, 01 Jun 2011 19:29:18 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[capistrano]]></category>

		<category domain="tag" nicename="capistrano"><![CDATA[capistrano]]></category>

		<category domain="tag"><![CDATA[deployment]]></category>

		<category domain="tag" nicename="deployment"><![CDATA[deployment]]></category>

		<category><![CDATA[nginx]]></category>

		<category domain="category" nicename="nginx"><![CDATA[nginx]]></category>

		<category domain="tag"><![CDATA[nginx]]></category>

		<category domain="tag" nicename="nginx"><![CDATA[nginx]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[unicorn]]></category>

		<category domain="tag" nicename="unicorn"><![CDATA[unicorn]]></category>

		<guid isPermaLink="false">http://zires.info/?p=611</guid>
		<description></description>
		<content:encoded><![CDATA[How deploy rails3 application using capistrano，unicorn，and nginx.
As we know，Capistrano is a auto-deploy tool kit just like Rake.

First，Let us deploy with unicorn and nginx on the server.
1）install nginx
[cc]
sudo apt-get install nginx
[/cc]
2）install unicorn
[cc]
[sudo] gem install unicorn
[/cc]
3）config unicorn under nginx
Find where is your nginx directory. Mine is /etc/nginx.
<br />
<a href="https://gist.github.com/1002990" target="_blank"><strong>nginx.conf</strong></a>
<br />
<a href="https://gist.github.com/1003002" target="_blank"><strong>conf.d/unicorn.conf</strong></a>
[cc]
NOTE!!!
# path for static files
root /path/to/your_app/current/public;

# Rails error pages
error_page 500 502 503 504 /500.html;
location = /500.html {
  root /path/to/your_app/current/public;
}
[/cc]

<p>Now，go into your application directory. Copy unicorn.rb into config directory.</p>
<p><a href="https://gist.github.com/1003028" target="_blank"><strong>unicorn.rb</strong></a></p>
run:
[cc]
[sudo] unicorn_rails -c /config/unicorn.rb -D -E production
[/cc]

And than restart your nginx server. Finished!

Next let's set up <a href="https://github.com/capistrano/capistrano" target="_blank">capistrano</a> for rails3 application.
4）install capistrano
add capistrano in your Gemfile
[cc]
gem 'capistrano'
[/cc]
Than
[cc]
[sudo] bundle install
[/cc]
And
[cc]
capify .
# This will create Capfile under the root and deploy.rb under /config
[/cc]

6）The last thing is create your own deploy.rb file
<br />
<a href="https://gist.github.com/1003099" target="_blank"><strong>deploy.rb</strong></a>
<br />
Finally
[cc]
cap deploy
[/cc]

The End.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>611</wp:post_id>
		<wp:post_date>2011-06-02 03:29:18</wp:post_date>
		<wp:post_date_gmt>2011-06-01 19:29:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>deployment-capistrano-unicorn-nginx-rails3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1306956559]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[320863003]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>104</wp:comment_id>
		<wp:comment_author><![CDATA[Darrell Moose]]></wp:comment_author>
		<wp:comment_author_email>sgiddis@aol.com</wp:comment_author_email>
		<wp:comment_author_url>http://sn.im/incomedominator</wp:comment_author_url>
		<wp:comment_author_IP>69.147.252.180</wp:comment_author_IP>
		<wp:comment_date>2011-08-12 17:45:35</wp:comment_date>
		<wp:comment_date_gmt>2011-08-12 09:45:35</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Jesus, somebody call ma, really love this blog :-)! But hey bud, I got some bad news, you're really missing out of a lot of visitors. I'm a blogger myself and I spend a lot of time making and reading them, ones like deployment capistrano unicorn nginx rails3 | zires. I recently got a new tool and it's done *wonders* to my entire business, this crazy thing is SO much more powerful and better. It's only been a week but my revenue has gone up to $258.11 $$CASH$$, all in one day! So want me to do you a favor? Ok, here's my big secret, where I learned all my tricks: --&gt;&gt; http://sn.im/incomedominator &lt;-- Just giving your site a look I can tell you&#039;ll probably pull in a couple hundred bucks a month if you just spend a few minutes tweaking some stuff. Damn, I feel like I just made someone&#039;s day today. But keep it a secret! I don&#039;t want too many people using it. Darrell Moose]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>error ’Can’t find Magick-config’ </title>
		<link>http://zires.info/2011/06/26/error-%e2%80%99can%e2%80%99t-find-magick-config%e2%80%99/</link>
		<pubDate>Sun, 26 Jun 2011 05:36:47 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[error]]></category>

		<category domain="tag" nicename="error"><![CDATA[error]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=641</guid>
		<description></description>
		<content:encoded><![CDATA[When i install RMagick gem,i got this error ’Can’t find Magick-config’ .
To fix this error:
[cc]
[sudo] apt-get install libmagick9-dev
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>641</wp:post_id>
		<wp:post_date>2011-06-26 13:36:47</wp:post_date>
		<wp:post_date_gmt>2011-06-26 05:36:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>error-%e2%80%99can%e2%80%99t-find-magick-config%e2%80%99</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1309066607]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[342426457]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>grep search files containing match word and print line number</title>
		<link>http://zires.info/2011/06/26/grep-search-files-containing-match-word-and-print-line-number/</link>
		<pubDate>Sun, 26 Jun 2011 07:14:08 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[grep]]></category>

		<category domain="tag" nicename="grep"><![CDATA[grep]]></category>

		<category><![CDATA[Linux]]></category>

		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>

		<guid isPermaLink="false">http://zires.info/?p=643</guid>
		<description></description>
		<content:encoded><![CDATA[Today i want to find some files containing the word 'mongoid' under a directory.
Try gerp
[cc]
grep -rl 'mongoid' config/locales/ --color=auto
[/cc]

And i need to know the line number.
[cc]
grep -orn 'mongoid' config/locales/ --color=auto
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>643</wp:post_id>
		<wp:post_date>2011-06-26 15:14:08</wp:post_date>
		<wp:post_date_gmt>2011-06-26 07:14:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grep-search-files-containing-match-word-and-print-line-number</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1309072450]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>dsq_thread_id</wp:meta_key>
		<wp:meta_value><![CDATA[342461451]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ffmpeg convert flv file to mp3</title>
		<link>http://zires.info/2011/07/05/ffmpeg-convert-flv-file-to-mp3/</link>
		<pubDate>Tue, 05 Jul 2011 04:54:24 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[convert]]></category>

		<category domain="tag" nicename="convert"><![CDATA[convert]]></category>

		<category domain="tag"><![CDATA[ffmpeg]]></category>

		<category domain="tag" nicename="ffmpeg"><![CDATA[ffmpeg]]></category>

		<category><![CDATA[ubuntu]]></category>

		<category domain="category" nicename="ubuntu"><![CDATA[ubuntu]]></category>

		<guid isPermaLink="false">http://zires.info/?p=646</guid>
		<description></description>
		<content:encoded><![CDATA[Using ffmpeg for coverting .flv file to .mp3.
[cc]
ffmpeg -i source.flv -ab 128k -ac 2 -acodec libmp3lame output.mp3
[/cc]
I got this error:
[cc]
unknown encoder 'libmp3lame'
[/cc]
solution:
[cc]
[sudo] aptitude install libavcodec-extra-52
[/cc]

参数说明:
[cc]
-ac 声道
-ar 采样率
-ab 比特率
[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>646</wp:post_id>
		<wp:post_date>2011-07-05 12:54:24</wp:post_date>
		<wp:post_date_gmt>2011-07-05 04:54:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ffmpeg-convert-flv-file-to-mp3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1309841665]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>mongoid distinct</title>
		<link>http://zires.info/2011/07/07/mongoid-distinct/</link>
		<pubDate>Wed, 06 Jul 2011 17:25:26 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[MongoDB]]></category>

		<category domain="category" nicename="mongodb"><![CDATA[MongoDB]]></category>

		<category domain="tag"><![CDATA[mongoDB]]></category>

		<category domain="tag" nicename="mongodb-2"><![CDATA[mongoDB]]></category>

		<category domain="tag"><![CDATA[mongoid]]></category>

		<category domain="tag" nicename="mongoid"><![CDATA[mongoid]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=649</guid>
		<description></description>
		<content:encoded><![CDATA[MongoDB里面的distinct很简单，就是找出集合中某一个字段的所有不同的值。
例子，假设如下的users文档：
[cc]
{ 
   "_id" : ObjectId("4df02258aca01b0ce1000005"), 
   "email" : "xxxxxx@gmail.com", 
   "name" : "zires", 
   "sign_in_count" : 3 }
{ 
   "_id" : ObjectId("4e149630aca01b0b66000002"), 
   "email" : "wangshi@gmail.com", 
   "name" : "wangshi", 
   "sign_in_count" : 3 }
{ 
   "_id" : ObjectId("4e149660aca01b0b66000006"), 
   "email" : "xixihaha@gmail.com", 
   "name" : "xixihaha", 
   "sign_in_count" : 2 }
[/cc]

在mongo中运行如下shell
[cc]
db.runCommand({"distinct" : "users", "key" : "name"})
[/cc]

结果：
[cc]
{
	"values" : [
		"zires",
		"wangshi",
		"xixihaha"
	],
	"stats" : {
		"n" : 3,
		"nscanned" : 3,
		"nscannedObjects" : 3,
		"timems" : 0
	},
	"ok" : 1
}
[/cc]

在mongoid中的操作：
[cc lang="ruby"]
User.collection.distinct(:name)
# => ["zires", "wangshi", "xixihaha"]
[/cc]

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>649</wp:post_id>
		<wp:post_date>2011-07-07 01:25:26</wp:post_date>
		<wp:post_date_gmt>2011-07-06 17:25:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mongoid-distinct</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1309996039]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>103</wp:comment_id>
		<wp:comment_author><![CDATA[free apple ipad]]></wp:comment_author>
		<wp:comment_author_email>Matsoukas4876@yahoo.com</wp:comment_author_email>
		<wp:comment_author_url>http://freeipadandiphone.com</wp:comment_author_url>
		<wp:comment_author_IP>67.202.122.239</wp:comment_author_IP>
		<wp:comment_date>2011-07-31 18:47:24</wp:comment_date>
		<wp:comment_date_gmt>2011-07-31 10:47:24</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Heya this is kinda of off topic but I was wanting to know if blogs use WYSIWYG editors or if you have to manually code with HTML. I'm starting a blog soon but have no coding experience so I wanted to get guidance from someone with experience. Any help would be enormously appreciated!]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>red5 get default stream file absolute path</title>
		<link>http://zires.info/2011/07/07/red5-get-default-stream-file-absolute-path/</link>
		<pubDate>Thu, 07 Jul 2011 06:49:17 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category><![CDATA[Red5]]></category>

		<category domain="category" nicename="red5"><![CDATA[Red5]]></category>

		<category domain="tag"><![CDATA[red5]]></category>

		<category domain="tag" nicename="red5-2"><![CDATA[red5]]></category>

		<guid isPermaLink="false">http://zires.info/?p=663</guid>
		<description></description>
		<content:encoded><![CDATA[These days i has been fell into <a href="http://www.red5.org/" target="_blank">Red5 </a> program. The Red5 Application will save live stream in the default path - /webapps/yourAppName/streams. Of couse, we can change the default path to custom directories. Check here <a href="http://www.red5tutorials.net/index.php/Tutorials%3aStreaming_from_custom_directories">Streaming from custom directories</a> for more details.

I am a lazy boy, moreover, the default path works fine. But i need to do some transcoding between flv and mp3. So i must get the saved file absolute path. Below is my code for getting the path.

Email me or leave a message when you find a better way!!

这些天一直在做Red5服务器端的开发，Red5应用默认会把实时的音频或者视频流放在/webapps下的streams文件夹下。当然，我们可以自定义文件的存放路径，详细的见<a href="http://www.red5tutorials.net/index.php/Tutorials%3aStreaming_from_custom_directories">这篇文章</a>。

我懒的改默认的存放位置，但是由于要做.flv和.mp3的转码，想知道文件的绝对位置，网上搜资料和看API都没有发现返回默认文件路径的方法，查源码写了个，可以拿来参考，代码如下：
[cc lang="java"]
import ...;

public class Application extends MultiThreadedApplicationAdapter{
  public String getDefaultStreamPath(IScope scope, String name) throws IOException{
		IStreamFilenameGenerator generator = (IStreamFilenameGenerator) ScopeUtils.getScopeService(scope, IStreamFilenameGenerator.class, DefaultStreamFilenameGenerator.class);
		String recordingFilename = generator.generateFilename(scope, name, ".flv", GenerationType.RECORD);
		File file = scope.getContext().getResource(recordingFilename).getFile();
		return file.getAbsolutePath().replace("\\", "\\\\");  // Windows path 
	}
}
[/cc]

如果谁知道有更好的方法，可以给我留言或者发邮件。

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>663</wp:post_id>
		<wp:post_date>2011-07-07 14:49:17</wp:post_date>
		<wp:post_date_gmt>2011-07-07 06:49:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>red5-get-default-stream-file-absolute-path</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1310021505]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails2.3.5 devise bundler install</title>
		<link>http://zires.info/2011/07/21/rails2-3-5-devise-bundler-install/</link>
		<pubDate>Wed, 20 Jul 2011 17:19:37 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[devise]]></category>

		<category domain="tag" nicename="devise"><![CDATA[devise]]></category>

		<category domain="tag"><![CDATA[rails2.3.5]]></category>

		<category domain="tag" nicename="rails2-3-5"><![CDATA[rails2.3.5]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<guid isPermaLink="false">http://zires.info/?p=683</guid>
		<description></description>
		<content:encoded><![CDATA[使用bundler在rails2.3.5项目中安装devise.

我的环境参数：
[cc]
ruby 1.8.7-head
rails 2.3.5
[/cc]

<strong><em style="color: blue;">STEP1  生成一个Rails2.3.5项目，名为blog</em></strong>
[cc]
rails blog -d mysql
[/cc]

<strong><em style="color: blue;">STEP2  安装和配置bundler</em></strong>
Bundler是rails3默认的gem包依赖管理工具，没有它真的很不方便，rails2.3.5也可以使用，<a href="http://gembundler.com/rails23.html" target="_blank">官方安装说明</a>.

首先：
[cc]
gem install bundler
[/cc]

然后在刚刚生成的blog项目的<strong>config/boot.rb</strong>文件的<em style="color: red;">最后</em>加上如下的代码：
<script src="https://gist.github.com/1095359.js?file=boot.rb"></script>

接着在config目录下新建一个文件叫preinitializer.rb，写入下面的代码：
<script src="https://gist.github.com/1095360.js?file=preinitializer.rb"></script>

最后在blog的根目录下创建文件Gemfile，如果是windows平台注意没有后缀名。这样我们就可以在rails2.3.5项目中使用bundler了.

<strong><em style="color: blue;">STEP3  安装devise</em></strong>
有了第二步安装的bundler，就简单多了.
在刚刚新建的Gemfile文件中加入devise，代码如下：
[cc lang="ruby"]
source :gemcutter

gem "rails", "2.3.5"
gem "devise", "1.0.10"
gem "mysql"
[/cc]

在blog根目录下运行命令：
[cc]
bundle install
[/cc]

<strong><em style="color: blue;">STEP4  简单使用devise</em></strong>
<em style="color:red;">先记得在config/database.yml中配置好数据库</em>.
运行命令建立数据库：
[cc]
rake db:create RAILS_ENV=development
[/cc]

在blog根目录下运行命令：
[cc]
ruby script/generate devise_install
[/cc]

接着新建User用户，还是在blog根目录下运行：
[cc]
ruby script/generate devise User
[/cc]

接着：
[cc]
rake db:migrate
[/cc]

ok。到目前为止，devise已经安装配置好了，下面测试下是否成功。

<strong><em style="color: blue;">STEP5  测试devise</em></strong>
我们的blog需要一个首页用来展示。
先删除public目录下的index.html文件。
运行命令，新建一个controller：
[cc]
ruby script/generate controller homepage index
[/cc]

配置路由，在config/routes.rb中加入：
[cc lang="ruby"]
map.root :controller => "homepage"
[/cc]

在views/homepage/index.html.erb中加入：
[cc lang="html"]
<ul class="hmenu">
  < % if user_signed_in? %>
    <li>
    < %= link_to('Logout', destroy_user_session_path, :method => 'delete') %>        
    </li>
  < % else %>
    <li>
    < %= link_to('Login', new_user_session_path)  %>  
    </li>
  < % end %>
  < % if user_signed_in? %>
    <li>
    < %= link_to('Edit registration', edit_user_registration_path) %>
    </li>
  < % else %>
    <li>
    < %= link_to('Register', new_user_registration_path)  %>
    </li>
  < % end %>
</ul>
[/cc]

最后启动服务：
[cc]
ruby script/server
[/cc]

ok！到这里应该就可以看见首页上有登录和注册的链接了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>683</wp:post_id>
		<wp:post_date>2011-07-21 01:19:37</wp:post_date>
		<wp:post_date_gmt>2011-07-20 17:19:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails2-3-5-devise-bundler-install</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1311217783]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rails3 application add subdomain</title>
		<link>http://zires.info/2011/08/07/rails3-application-add-subdomain/</link>
		<pubDate>Sun, 07 Aug 2011 05:50:42 +0000</pubDate>
		<dc:creator><![CDATA[zires]]></dc:creator>
		
		<category domain="tag"><![CDATA[rails3]]></category>

		<category domain="tag" nicename="rails3"><![CDATA[rails3]]></category>

		<category><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="category" nicename="ruby%ef%bc%8crails"><![CDATA[Ruby&amp;Rails]]></category>

		<category domain="tag"><![CDATA[subdomain]]></category>

		<category domain="tag" nicename="subdomain"><![CDATA[subdomain]]></category>

		<guid isPermaLink="false">http://zires.info/?p=726</guid>
		<description></description>
		<content:encoded><![CDATA[在rails3项目中配置subdomain。假设我们有个网站www.zires.info。我想把www.zires.info/photos变成子域名的形式www.photos.zires.info。

<strong>第一步：配置路由</strong>
[ruby title="routes.rb"]
constraints(:subdomain=&gt;&quot;photos&quot;) do
  root :to =&gt; &quot;photos#index&quot;
end
[/ruby]
至此，访问photos.zires.info就会到photos的index页面。但是www.photo.zires.info就不对了，所以还需要对www进行过滤。

<strong>第二步：过滤"www"</strong>

创建一个subdomain.rb文件在项目的initializers中
[ruby title="config/initializers/subdomain.rb"]
class Subdomain
  def self.matches?(request)
    request.subdomain.present? and request.subdomain == 'photos'
  end
end
[/ruby]

[ruby title="routes.rb"]
constraints(Subdomain) do
  root :to =&gt; &quot;photos#index&quot;
end
[/ruby]
这样路由就配置好了。

<strong>第三步：修改UrlHelper</strong>

我们还需要在url_for中增加一个subdomain参数，这样就可以指定url是在哪个域名下面了。
[ruby title="app/helpers/url_helper.rb"]
module UrlHelper
 
  def url_for(options =nil)
     if options.kind_of?(Hash) and options.has_key?(:subdomain)
       options[:host] = with_subdomain(options.delete(:subdomain))
     end
     super
  end

  def with_subdomain(subdomain=&quot;&quot;)
    subdomain += &quot;.&quot; unless subdomain.empty?
    [subdomain, request.domain].join
  end

end
[/ruby]

<strong>第四步：session共享</strong>

但是发现session不能在domain和subdomain之间共享，需要指定下
[ruby title="config/initializers/session_store.rb"]
Zires::Application.config.session_store :cookie_store, key: '_zires_session', domain: '.zires.info'
[/ruby]

重启下就完成了。

<blockquote>参考链接：
http://asciicasts.com/episodes/221-subdomains-in-rails-3</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>726</wp:post_id>
		<wp:post_date>2011-08-07 13:50:42</wp:post_date>
		<wp:post_date_gmt>2011-08-07 05:50:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rails3-application-add-subdomain</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1312696243]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_265428cfe2da3af92ee179e265edb989</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
	</channel>
</rss>
